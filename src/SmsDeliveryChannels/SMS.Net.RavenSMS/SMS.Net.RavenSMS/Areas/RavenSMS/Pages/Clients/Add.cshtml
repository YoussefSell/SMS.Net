@page
@model SMS.Net.RavenSMS.Pages.ClientsAddPageModel
@{
    ViewData["page_title"] = "Client registration";
}

<div class="app-content pt-3 p-md-3 p-lg-4">
    <div class="container-xl">
        <h1 class="app-page-title">Client Registration</h1>
        <hr class="mb-4">
        <div class="row g-4 settings-section">
            <div class="app-card app-card-settings shadow-sm p-4">
                <div class="app-card-body">
                    <form id="add-client-form" class="settings-form" method="post">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <!-- Client name -->
                        <div class="mb-3">
                            <label asp-for="Input.Name" class="form-label">Name</label>
                            <input asp-for="Input.Name" class="form-control" placeholder="client app name">
                            <span asp-validation-for="Input.Name" class="invalid-feedback"></span>
                        </div>
                        <!-- Client description -->
                        <div class="mb-3">
                            <label asp-for="Input.Description" class="form-label">Description</label>
                            <textarea asp-for="Input.Description" class="form-control" placeholder="client app description" style="height: 100px"></textarea>
                            <span asp-validation-for="Input.Description" class="invalid-feedback"></span>
                        </div>
                        <!-- Client phone number -->
                        <div class="mb-3">
                            <label for="client-add-phone-number" class="form-label">Phone numbers</label>
                            <div class="input-group mb-3">
                                <input id="client-add-phone-number" type="text" class="form-control" placeholder="add phone number" aria-label="add phone number" aria-describedby="add-phone-number">
                                <button class="btn btn-secondary" type="button" id="add-phone-number" onclick="onAddPhoneNumber()">add</button>
                            </div>
                            <span id="client-add-phone-number-error-viewer" class="invalid-feedback field-validation-valid" data-valmsg-for="client-add-phone-number" data-valmsg-replace="true"></span>
                        </div>
                        <div class="mb-3">
                            <ul class="list-group" id="phone-numbers-list"></ul>
                        </div>

                        <!-- Send action -->
                        <button type="submit" class="btn app-btn-primary">Register</button>
                    </form>
                </div>
            </div>
        </div>
        <hr class="my-4">
    </div>
</div>

@section scripts {
<script src="~/js/messages.add.page.min.js"></script>
<script>
      const phoneNumberRegex = /^[\+]?[(]?[0-9]{3}[)]?[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{4,6}$/;

      // init the list of phone numbers
      let phoneNumbers = [];

      // populate pre-defined numbers for the request
      @foreach (var d in Model.Input.GetPhoneNumbers())
      {
      @:phoneNumbers.push("@Html.Raw(d)");
      }

      // render the phone numbers
      renderPhoneNumbers();

      // add form submission logic
      $("form").submit(function(e){
          // get the form instance & prevent the default
          var $form = $(this);

          // append the phone numbers
          $form.append(`<input type="hidden" name="Input.PhoneNumbers" value="${phoneNumbers}" />`);
      });

      function onAddPhoneNumber() {
          // select the phone number input
          let $phoneNumberInput = $('#client-add-phone-number');
          let phoneNumber = $phoneNumberInput.val();

          // if the phone number value is empty just return
          if (phoneNumber == '' || phoneNumber == undefined) {
              setPhoneNumberToInvalid("you must supply a valid phone number value");
              return;
          }

          // check if the value is for a valid phone number
          if (!phoneNumberRegex.test(phoneNumber)) {
              setPhoneNumberToInvalid("you must supply a valid phone number value");
              return;
          }

          // if the phone number is already exist return
          if (phoneNumbers.includes(phoneNumber)) {
              setPhoneNumberToInvalid("the given phone number already exist!");
              return;
          }

          // add the phone number to the list
          appendPhoneNumber(phoneNumber);

          // save the phone number
          phoneNumbers.push(phoneNumber);

          // clear the input
          console.log(typeof phoneNumber)
          $phoneNumberInput.val('');
      }

      function appendPhoneNumber(phone_number){
          // select the phone numbers list
          var $clientsSelect = $("#phone-numbers-list");

          // append the phone number
          $clientsSelect.append(`
          <li class="list-group-item d-flex justify-content-between align-items-center" onclick="removePhoneNumber('${phone_number}')">
              ${phone_number}
              <i class="far fa-trash-alt" style="color:red; cursor:pointer;"></i>
          </li>
          `);
      }

      function renderPhoneNumbers() {
          // select the phone numbers list
          var $clientsSelect = $("#phone-numbers-list");

          // empty the list
          $clientsSelect.empty();

          // append phone numbers
          $.each(phoneNumbers, function (){
              if (phoneNumberRegex.test(this)) {
                  appendPhoneNumber(this);
              }
          });
      }

      function removePhoneNumber(phone_number) {
          var index = phoneNumbers.indexOf(phone_number);

          console.log(phone_number);
          console.log(phoneNumbers);
          if (index > -1) {
              phoneNumbers.splice(index, 1);
          }
          console.log(phoneNumbers);

          renderPhoneNumbers();
      }

      function setPhoneNumberToInvalid(error_message){
          $('#client-add-phone-number').addClass('is-invalid');
          $('#client-add-phone-number-error-viewer').removeClass('field-validation-valid');
          $('#client-add-phone-number-error-viewer').addClass('field-validation-error');
          $('#client-add-phone-number-error-viewer').empty();
          $('#client-add-phone-number-error-viewer').append(`<div id="client-add-phone-number-error" class="is-invalid">${error_message}</div>`);
      }

      $(function () {
          // get the form settings
          var validatorSettings = $.data($('#add-client-form')[0], 'validator').settings;

          // override the settings
          validatorSettings.onkeyup = false;
          validatorSettings.errorElement = "div";
          validatorSettings.errorClass = "is-invalid";
      });
</script>
}