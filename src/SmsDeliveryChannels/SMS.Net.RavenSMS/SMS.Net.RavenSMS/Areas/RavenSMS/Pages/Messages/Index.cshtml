@page
@model SMS.Net.RavenSMS.Pages.MessagesIndexPageModel
@{
}

<div class="app-content pt-3 p-md-3 p-lg-4">
    <div class="container-xl">

        <div class="row g-3 mb-4 align-items-center justify-content-between">
            <div class="col-auto">
                <h1 class="app-page-title mb-0">Messages</h1>
            </div>
            <div class="col-auto">
                <div class="page-utilities">
                    <div class="row g-2 justify-content-start justify-content-md-end align-items-center">
                        <div class="col-auto">
                            <div class="table-search-form row gx-1 align-items-center">
                                <div class="col-auto">
                                    <input type="text" id="search-query" name="searchQuery" class="form-control" placeholder="Search">
                                </div>
                                <div class="col-auto">
                                   @* <input id="search-period" type="text" class="form-control" />*@
                                    <div id="search-period" style="background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
                                        <i class="fa fa-calendar"></i>&nbsp;
                                        <span></span> <i class="fa fa-caret-down"></i>
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <button type="submit" class="btn app-btn-secondary">Search</button>
                                </div>
                            </div>
                        </div><!--//col-->
                        <div class="col-auto">
                            <a class="btn app-btn-secondary" asp-page="/Messages/Add">
                                <i class="fas fa-edit"></i>
                                Compose
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <nav id="orders-table-tab" class="orders-table-tab app-nav-tabs nav shadow-sm flex-column flex-sm-row mb-4">
            <a class="flex-sm-fill text-sm-center nav-link active" id="orders-all-tab" data-bs-toggle="tab" href="#orders-all" role="tab" aria-controls="orders-all" aria-selected="true">All</a>
            <a class="flex-sm-fill text-sm-center nav-link" id="orders-paid-tab" data-bs-toggle="tab" href="#orders-paid" role="tab" aria-controls="orders-paid" aria-selected="false">Queued</a>
            <a class="flex-sm-fill text-sm-center nav-link" id="orders-pending-tab" data-bs-toggle="tab" href="#orders-pending" role="tab" aria-controls="orders-pending" aria-selected="false">Sent</a>
            <a class="flex-sm-fill text-sm-center nav-link" id="orders-cancelled-tab" data-bs-toggle="tab" href="#orders-cancelled" role="tab" aria-controls="orders-cancelled" aria-selected="false">Failed</a>
        </nav>

        <div class="app-card app-card-orders-table shadow-sm mb-5">
            <div class="app-card-body">
                <div class="table-responsive">
                    <table id="messages_table" class="table app-table-hover mb-0 text-left">
                        <thead>
                            <tr>
                                <th class="cell">Id</th>
                                <th class="cell">Client</th>
                                <th class="cell">From</th>
                                <th class="cell">To</th>
                                <th class="cell">Date</th>
                                <th class="cell">Status</th>
                                <th class="cell"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <nav class="app-pagination">
            <ul id="paginator" class="pagination justify-content-center">
            </ul>
        </nav>

    </div>
</div>

@section styles {
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
}

@section scripts {
<script src="~/js/messages.index.page.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<script>

    // init the date range picker
    $("#search-period").daterangepicker({
        ranges: {
           'Today': [moment(), moment()],
           'Last 7 Days': [moment().subtract(6, 'days'), moment()],
           'Last 30 Days': [moment().subtract(29, 'days'), moment()],
           'This Month': [moment().startOf('month'), moment().endOf('month')],
           'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
    }, function(start, end) {
        $('#search-period span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
    });

    // init the list of messages
    let messages = [];

    // load the initial data
    loadData();

    function loadData() {
        $.ajax({
            url: '/ravenSMS/messages/index/?handler=Messages',
            data: {
                pageIndex: 1,
                pageSize: 5,
            },
            success: function (result)
            {
                // save the result
                messages = result.data;

                // select table element
                const $table = $("#messages_table");

                // add the data to the table
                $.each(messages, function() {
                    $table.append(buildTableRow(this));
                });

                // set the pagination details
                SetPagination(
                    result.pagination.rowsCount,
                    result.pagination.pageIndex,
                    result.pagination.pageSize,
                );
            }
        });
    }

    function buildTableRow(message) {
        const messageDate = moment(message.date);
            console.log(messageDate);

        return `<tr>
            <td style="max-width:150px" class="cell">${message.id}</td>
            <td class="cell"><span class="truncate">${message.client.name}</span></td>
            <td class="cell">${message.from}</td>
            <td class="cell">${message.to}</td>
            <td class="cell"><span>${messageDate.format('DD/MMM/YYYY')}</span><span class="note">${messageDate.format('hh:mm A')}</span></td>
            <td class="cell">${GetStatusSpan()}</td>
            <td class="cell">
                <a class="btn-sm app-btn-secondary" href="Messages/${message.id}/Preview">View</a>
            </td>
        </tr>`
    }

    function SetPagination(rowsCount, pageIndex, pageSize) {
        // select the paginator
        const $paginator = $("#paginator");

        // empty the paginator
        $paginator.empty();

        // append the previous button
        $paginator.append(`
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
        `);

        // get the pagination logic
        const pagination = paginate(rowsCount, pageIndex, pageSize);

        // append pages
        $.each(pagination.pages, function() {
            $paginator.append(`<li class="page-item ${this == pagination.currentPage ? 'active': ''}"><a class="page-link" href="#">${this}</a></li>`);
        })

        // append the Next button
        $paginator.append(`
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        `);
    }

    function GetStatusSpan(status) {
        switch(status){
            case 1: return `<span class="badge bg-warning">Queued</span>`
            case 2: return `<span class="badge bg-danger">Failed</span>`
            case 3: return `<span class="badge bg-success">Sent</span>`
            default: return `<span class="badge bg-secondary">Created</span>`
        }
    }

    function getFilterData() {

        let startDate = null;
        let endDate = null;


        switch($("#search-period").val()) {
            case 1:
                endDate = new Date();
                startDate = new Date().setDate(endDate.getDate() + -7);
                break;

        }


        return new {
            searchQuery: $("#search-query").val(),
            startDate: new Date(),
            endDate: new Date(),
            Status: [

            ],
            to: [],
            from: [],
            clients: [],
        };
    }

</script>
}