!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(t="undefined"!=typeof globalThis?globalThis:t||self).Chart=e()}(this,function(){"use strict";const o="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function l(e,i,t){const s=t||(t=>Array.prototype.slice.call(t));let n=!1,a;return function(...t){a=s(t),n||(n=!0,o.call(window,()=>{n=!1,e.apply(i,a)}))}}function h(e,i){let s;return function(...t){return i?(clearTimeout(s),s=setTimeout(e,i,t)):e.apply(this,t),i}}const f=t=>"start"===t?"left":"end"===t?"right":"center",P=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,D=(t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e;var c=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,i,s,t){const n=i.listeners[t],a=i.duration;n.forEach(t=>t({chart:e,initial:i.initial,numSteps:a,currentStep:Math.min(s-i.start,a)}))}_refresh(){this._request||(this._running=!0,this._request=o.call(window,()=>{this._update(),this._request=null,this._running&&this._refresh()}))}_update(o=Date.now()){let r=0;this._charts.forEach((s,n)=>{if(s.running&&s.items.length){const a=s.items;let t,e=a.length-1,i=!1;for(;0<=e;--e)t=a[e],t._active?(t._total>s.duration&&(s.duration=t._total),t.tick(o),i=!0):(a[e]=a[a.length-1],a.pop());i&&(n.draw(),this._notify(n,s,o,"progress")),a.length||(s.running=!1,this._notify(n,s,o,"complete"),s.initial=!1),r+=a.length}}),this._lastDate=o,0===r&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return 0<this._getAnims(t).items.length}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce((t,e)=>Math.max(t,e._duration),0),this._refresh())}running(t){if(!this._running)return!1;t=this._charts.get(t);return!!(t&&t.running&&t.items.length)}stop(e){const i=this._charts.get(e);if(i&&i.items.length){const s=i.items;let t=s.length-1;for(;0<=t;--t)s[t].cancel();i.items=[],this._notify(e,i,Date.now(),"complete")}}remove(t){return this._charts.delete(t)}};const a={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},e="0123456789ABCDEF",i=t=>e[15&t],s=t=>e[(240&t)>>4]+e[15&t],n=t=>(240&t)>>4==(15&t);function r(t){return t+.5|0}const d=(t,e,i)=>Math.max(Math.min(t,i),e);function u(t){return d(r(2.55*t),0,255)}function g(t){return d(r(255*t),0,255)}function p(t){return d(r(t/2.55)/100,0,1)}function m(t){return d(r(100*t),0,100)}const x=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,b=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function v(i,t,s){const n=t*Math.min(s,1-s),e=(t,e=(t+i/30)%12)=>s-n*Math.max(Math.min(e-3,9-e,1),-1);return[e(0),e(8),e(4)]}function _(i,s,n){i=(t,e=(t+i/60)%6)=>n-n*s*Math.max(Math.min(e,4-e,1),0);return[i(5),i(3),i(1)]}function y(t,e,i){const s=v(t,1,.5);let n;for(1<e+i&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function w(t){var e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),a=Math.min(e,i,s),t=(n+a)/2;let o,r,l;return n!==a&&(l=n-a,r=.5<t?l/(2-n-a):l/(n+a),o=n===e?(i-s)/l+(i<s?6:0):n===i?(s-e)/l+2:(e-i)/l+4,o=60*o+.5),[0|o,r||0,t]}function M(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(g)}function k(t,e,i){return M(v,t,e,i)}function S(t){return(t%360+360)%360}const C={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},O={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let A;function T(e,i,s){if(e){let t=w(e);t[i]=Math.max(0,Math.min(t[i]+t[i]*s,0===i?360:1)),t=k(t),e.r=t[0],e.g=t[1],e.b=t[2]}}function L(t,e){return t&&Object.assign(e||{},t)}function R(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?3<=t.length&&(e={r:t[0],g:t[1],b:t[2],a:255},3<t.length&&(e.a=g(t[3]))):(e=L(t,{r:0,g:0,b:0,a:1})).a=g(e.a),e}function E(t){return("r"===t.charAt(0)?function(t){t=x.exec(t);let e,i,s,n=255;if(t){if(t[7]!==e){const a=+t[7];n=255&(t[8]?u(a):255*a)}return e=+t[1],i=+t[3],s=+t[5],e=255&(t[2]?u(e):e),i=255&(t[4]?u(i):i),s=255&(t[6]?u(s):s),{r:e,g:i,b:s,a:n}}}:function(t){var e=b.exec(t);let i,s=255;if(e){void 0!==e[5]&&(s=(e[6]?u:g)(+e[5]));var n=S(+e[2]),a=+e[3]/100,t=+e[4]/100;return{r:(i="hwb"===e[1]?M(y,n,a,t):"hsv"===e[1]?M(_,n,a,t):k(n,a,t))[0],g:i[1],b:i[2],a:s}}})(t)}class I{constructor(t){if(t instanceof I)return t;var e,i,s=typeof t;let n;"object"==s?n=R(t):"string"==s&&(s=(e=t).length,"#"===e[0]&&(4===s||5===s?i={r:255&17*a[e[1]],g:255&17*a[e[2]],b:255&17*a[e[3]],a:5===s?17*a[e[4]]:255}:7!==s&&9!==s||(i={r:a[e[1]]<<4|a[e[2]],g:a[e[3]]<<4|a[e[4]],b:a[e[5]]<<4|a[e[6]],a:9===s?a[e[7]]<<4|a[e[8]]:255})),n=i||(i=t,A||(A=function(){const t={},e=Object.keys(O),i=Object.keys(C);let s,n,a,o,r;for(s=0;s<e.length;s++){for(o=r=e[s],n=0;n<i.length;n++)a=i[n],r=r.replace(a,C[a]);a=parseInt(O[o],16),t[r]=[a>>16&255,a>>8&255,255&a]}return t}(),A.transparent=[0,0,0,0]),(i=A[i.toLowerCase()])&&{r:i[0],g:i[1],b:i[2],a:4===i.length?i[3]:255})||E(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=L(this._rgb);return t&&(t.a=p(t.a)),t}set rgb(t){this._rgb=R(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${p(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=t,e=n(e.r)&&n(e.g)&&n(e.b)&&n(e.a)?i:s,t&&"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):"")):this._rgb;var t,e}hslString(){return this._valid?function(t){if(t){var e=w(t),i=e[0],s=m(e[1]),e=m(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${e}%, ${p(t.a)})`:`hsl(${i}, ${s}%, ${e}%)`}}(this._rgb):this._rgb}mix(t,e){if(t){const s=this.rgb,n=t.rgb;var i=void 0===e?.5:e,t=2*i-1,e=s.a-n.a,t=(1+(t*e==-1?t:(t+e)/(1+t*e)))/2,e=1-t;s.r=255&t*s.r+e*n.r+.5,s.g=255&t*s.g+e*n.g+.5,s.b=255&t*s.b+e*n.b+.5,s.a=i*s.a+(1-i)*n.a,this.rgb=s}return this}clone(){return new I(this.rgb)}alpha(t){return this._rgb.a=g(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=r(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return T(this._rgb,2,t),this}darken(t){return T(this._rgb,2,-t),this}saturate(t){return T(this._rgb,1,t),this}desaturate(t){return T(this._rgb,1,-t),this}rotate(t){return e=this._rgb,i=t,(t=w(e))[0]=S(t[0]+i),t=k(t),e.r=t[0],e.g=t[1],e.b=t[2],this;var e,i}}function z(t){return new I(t)}const F=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function B(t){return F(t)?t:z(t)}function V(t){return F(t)?t:z(t).saturate(.5).darken(.1).hexString()}function t(){}const W=function(){let t=0;return function(){return t++}}();function N(t){return null==t}function H(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function j(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const $=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function Y(t,e){return $(t)?t:e}function U(t,e){return void 0===t?e:t}const X=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:t/e,q=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function K(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function G(t,e,i,s){let n,a,o;if(H(t))if(a=t.length,s)for(n=a-1;0<=n;n--)e.call(i,t[n],n);else for(n=0;n<a;n++)e.call(i,t[n],n);else if(j(t))for(o=Object.keys(t),a=o.length,n=0;n<a;n++)e.call(i,t[o[n]],o[n])}function Z(t,e){let i,s,n,a;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],a=e[i],n.datasetIndex!==a.datasetIndex||n.index!==a.index)return!1;return!0}function J(e){if(H(e))return e.map(J);if(j(e)){const i=Object.create(null),s=Object.keys(e),n=s.length;let t=0;for(;t<n;++t)i[s[t]]=J(e[s[t]]);return i}return e}function Q(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function tt(t,e,i,s){var n;Q(t)&&(n=e[t],i=i[t],j(n)&&j(i)?et(n,i,s):e[t]=J(i))}function et(i,s,n){const e=H(s)?s:[s],a=e.length;if(!j(i))return i;const o=(n=n||{}).merger||tt;for(let t=0;t<a;++t)if(j(s=e[t])){const a=Object.keys(s);for(let t=0,e=a.length;t<e;++t)o(a[t],i,s,n)}return i}function it(t,e){return et(t,e,{merger:st})}function st(t,e,i){var s;Q(t)&&(s=e[t],i=i[t],j(s)&&j(i)?it(s,i):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=J(i)))}function nt(t,e){e=t.indexOf(".",e);return-1===e?t.length:e}function at(t,e){if(""===e)return t;let i=0,s=nt(e,i);for(;t&&s>i;)t=t[e.substr(i,s-i)],i=s+1,s=nt(e,i);return t}function ot(t){return t.charAt(0).toUpperCase()+t.slice(1)}const rt=t=>void 0!==t,lt=t=>"function"==typeof t,ht=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function ct(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const dt=Object.create(null),ut=Object.create(null);function ft(i,t){if(!t)return i;var s=t.split(".");for(let t=0,e=s.length;t<e;++t){var n=s[t];i=i[n]||(i[n]=Object.create(null))}return i}function gt(t,e,i){return"string"==typeof e?et(ft(t,e),i):et(ft(t,""),e)}var pt=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>V(e.backgroundColor),this.hoverBorderColor=(t,e)=>V(e.borderColor),this.hoverColor=(t,e)=>V(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return gt(this,t,e)}get(t){return ft(this,t)}describe(t,e){return gt(ut,t,e)}override(t,e){return gt(dt,t,e)}route(t,e,i,s){const n=ft(this,t),a=ft(this,i),o="_"+e;Object.defineProperties(n,{[o]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){var t=this[o],e=a[s];return j(t)?Object.assign({},e,t):U(t,e)},set(t){this[o]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});const mt=Math.PI,xt=2*mt,bt=xt+mt,vt=Number.POSITIVE_INFINITY,_t=mt/180,yt=mt/2,wt=mt/4,Mt=2*mt/3,kt=Math.log10,St=Math.sign;function Pt(t){var e=Math.round(t);t=Ot(t,e,t/1e3)?e:t;e=Math.pow(10,Math.floor(kt(t))),t/=e;return(t<=1?1:t<=2?2:t<=5?5:10)*e}function Dt(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort((t,e)=>t-e).pop(),e}function Ct(t){return!isNaN(parseFloat(t))&&isFinite(t)}function Ot(t,e,i){return Math.abs(t-e)<i}function At(t,e){var i=Math.round(t);return i-e<=t&&t<=i+e}function Tt(t,e,i){let s,n,a;for(s=0,n=t.length;s<n;s++)a=t[s][i],isNaN(a)||(e.min=Math.min(e.min,a),e.max=Math.max(e.max,a))}function Lt(t){return t*(mt/180)}function Rt(t){return t*(180/mt)}function Et(i){if($(i)){let t=1,e=0;for(;Math.round(i*t)/t!==i;)t*=10,e++;return e}}function It(t,e){var i=e.x-t.x,e=e.y-t.y,t=Math.sqrt(i*i+e*e);let s=Math.atan2(e,i);return s<-.5*mt&&(s+=xt),{angle:s,distance:t}}function zt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function Ft(t,e){return(t-e+bt)%xt-mt}function Bt(t){return(t%xt+xt)%xt}function Vt(t,e,i,s){var n=Bt(t),a=Bt(e),o=Bt(i),r=Bt(a-n),t=Bt(o-n),e=Bt(n-a),i=Bt(n-o);return n===a||n===o||s&&a===o||t<r&&e<i}function Wt(t,e,i){return Math.max(e,Math.min(i,t))}function Nt(t){return Wt(t,-32768,32767)}function Ht(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function jt(t){return!t||N(t.size)||N(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function $t(t,e,i,s,n){let a=e[n];return a||(a=e[n]=t.measureText(n).width,i.push(n)),s=a>s?a:s}function Yt(t,e,i,s){let n=(s=s||{}).data=s.data||{},a=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},a=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let o=0;var r=i.length;let l,h,c,d,u;for(l=0;l<r;l++)if(null!=(d=i[l])&&!0!==H(d))o=$t(t,n,a,o,d);else if(H(d))for(h=0,c=d.length;h<c;h++)null==(u=d[h])||H(u)||(o=$t(t,n,a,o,u));t.restore();var f=a.length/2;if(f>i.length){for(l=0;l<f;l++)delete n[a[l]];a.splice(0,f)}return o}function Ut(t,e,i){t=t.currentDevicePixelRatio,i=0!==i?Math.max(i/2,.5):0;return Math.round((e-i)*t)/t+i}function Xt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function qt(t,e,i,s){let n,a,o,r,l;const h=e.pointStyle,c=e.rotation,d=e.radius;let u=(c||0)*_t;if(h&&"object"==typeof h&&("[object HTMLImageElement]"===(n=h.toString())||"[object HTMLCanvasElement]"===n))return t.save(),t.translate(i,s),t.rotate(u),t.drawImage(h,-h.width/2,-h.height/2,h.width,h.height),void t.restore();if(!(isNaN(d)||d<=0)){switch(t.beginPath(),h){default:t.arc(i,s,d,0,xt),t.closePath();break;case"triangle":t.moveTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Mt,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),u+=Mt,t.lineTo(i+Math.sin(u)*d,s-Math.cos(u)*d),t.closePath();break;case"rectRounded":l=.516*d,r=d-l,a=Math.cos(u+wt)*r,o=Math.sin(u+wt)*r,t.arc(i-a,s-o,l,u-mt,u-yt),t.arc(i+o,s-a,l,u-yt,u),t.arc(i+a,s+o,l,u,u+yt),t.arc(i-o,s+a,l,u+yt,u+mt),t.closePath();break;case"rect":if(!c){r=Math.SQRT1_2*d,t.rect(i-r,s-r,2*r,2*r);break}u+=wt;case"rectRot":a=Math.cos(u)*d,o=Math.sin(u)*d,t.moveTo(i-a,s-o),t.lineTo(i+o,s-a),t.lineTo(i+a,s+o),t.lineTo(i-o,s+a),t.closePath();break;case"crossRot":u+=wt;case"cross":a=Math.cos(u)*d,o=Math.sin(u)*d,t.moveTo(i-a,s-o),t.lineTo(i+a,s+o),t.moveTo(i+o,s-a),t.lineTo(i-o,s+a);break;case"star":a=Math.cos(u)*d,o=Math.sin(u)*d,t.moveTo(i-a,s-o),t.lineTo(i+a,s+o),t.moveTo(i+o,s-a),t.lineTo(i-o,s+a),u+=wt,a=Math.cos(u)*d,o=Math.sin(u)*d,t.moveTo(i-a,s-o),t.lineTo(i+a,s+o),t.moveTo(i+o,s-a),t.lineTo(i-o,s+a);break;case"line":a=Math.cos(u)*d,o=Math.sin(u)*d,t.moveTo(i-a,s-o),t.lineTo(i+a,s+o);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(u)*d,s+Math.sin(u)*d)}t.fill(),0<e.borderWidth&&t.stroke()}}function Kt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function Gt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Zt(t){t.restore()}function Jt(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Qt(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function te(t,e,i,s,n,a={}){var o,r=H(e)?e:[e],l=0<a.strokeWidth&&""!==a.strokeColor;let h,c;for(t.save(),t.font=n.string,o=t,(e=a).translation&&o.translate(e.translation[0],e.translation[1]),N(e.rotation)||o.rotate(e.rotation),e.color&&(o.fillStyle=e.color),e.textAlign&&(o.textAlign=e.textAlign),e.textBaseline&&(o.textBaseline=e.textBaseline),h=0;h<r.length;++h)c=r[h],l&&(a.strokeColor&&(t.strokeStyle=a.strokeColor),N(a.strokeWidth)||(t.lineWidth=a.strokeWidth),t.strokeText(c,i,s,a.maxWidth)),t.fillText(c,i,s,a.maxWidth),function(t,e,i,s,n){{var a,o;(n.strikethrough||n.underline)&&(o=t.measureText(s),a=e-o.actualBoundingBoxLeft,s=e+o.actualBoundingBoxRight,e=i-o.actualBoundingBoxAscent,o=i+o.actualBoundingBoxDescent,o=n.strikethrough?(e+o)/2:o,t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,o),t.lineTo(s,o),t.stroke())}}(t,i,s,c,a),s+=n.lineHeight;t.restore()}function ee(t,e){var{x:i,y:s,w:n,h:a,radius:e}=e;t.arc(i+e.topLeft,s+e.topLeft,e.topLeft,-yt,mt,!0),t.lineTo(i,s+a-e.bottomLeft),t.arc(i+e.bottomLeft,s+a-e.bottomLeft,e.bottomLeft,mt,yt,!0),t.lineTo(i+n-e.bottomRight,s+a),t.arc(i+n-e.bottomRight,s+a-e.bottomRight,e.bottomRight,yt,0,!0),t.lineTo(i+n,s+e.topRight),t.arc(i+n-e.topRight,s+e.topRight,e.topRight,0,-yt,!0),t.lineTo(i+e.topLeft,s)}function ie(e,i,t){t=t||(t=>e[t]<i);let s,n=e.length-1,a=0;for(;1<n-a;)t(s=a+n>>1)?a=s:n=s;return{lo:a,hi:n}}const se=(e,i,s)=>ie(e,s,t=>e[t][i]<s),ne=(e,i,s)=>ie(e,s,t=>e[t][i]>=s);function ae(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return 0<s||n<t.length?t.slice(s,n):t}const oe=["push","pop","shift","splice","unshift"];function re(n,t){n._chartjs?n._chartjs.listeners.push(t):(Object.defineProperty(n,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),oe.forEach(t=>{const i="_onData"+ot(t),s=n[t];Object.defineProperty(n,t,{configurable:!0,enumerable:!1,value(...e){var t=s.apply(this,e);return n._chartjs.listeners.forEach(t=>{"function"==typeof t[i]&&t[i](...e)}),t}})}))}function le(e,t){var i=e._chartjs;if(i){const s=i.listeners,n=s.indexOf(t);-1!==n&&s.splice(n,1),0<s.length||(oe.forEach(t=>{delete e[t]}),delete e._chartjs)}}function he(t){const e=new Set;let i,s;for(i=0,s=t.length;i<s;++i)e.add(t[i]);return e.size===s?t:Array.from(e)}function ce(){return"undefined"!=typeof window&&"undefined"!=typeof document}function de(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ue(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const fe=t=>window.getComputedStyle(t,null);function ge(t,e){return fe(t).getPropertyValue(e)}const pe=["top","right","bottom","left"];function me(e,i,s){const n={};s=s?"-"+s:"";for(let t=0;t<4;t++){var a=pe[t];n[a]=parseFloat(e[i+"-"+a+s])||0}return n.width=n.left+n.right,n.height=n.top+n.bottom,n}function xe(t,e){var{canvas:i,currentDevicePixelRatio:s}=e,n=fe(i),a="border-box"===n.boxSizing,o=me(n,"padding"),r=me(n,"border","width"),{x:l,y:h,box:n}=function(t,e){var i=t.native||t,s=i.touches,n=s&&s.length?s[0]:i,{offsetX:t,offsetY:s}=n;let a,o,r=!1;if(i=i.target,!(0<t||0<s)||i&&i.shadowRoot){const l=e.getBoundingClientRect();a=n.clientX-l.left,o=n.clientY-l.top,r=!0}else a=t,o=s;return{x:a,y:o,box:r}}(t,i),t=o.left+(n&&r.left),n=o.top+(n&&r.top);let{width:c,height:d}=e;return a&&(c-=o.width+r.width,d-=o.height+r.height),{x:Math.round((l-t)/c*i.width/s),y:Math.round((h-n)/d*i.height/s)}}const be=t=>Math.round(10*t)/10;function ve(t,e,i,s){var n=fe(t),a=me(n,"margin"),o=ue(n.maxWidth,t,"clientWidth")||vt,r=ue(n.maxHeight,t,"clientHeight")||vt,i=function(t,e,i){let s,n;if(void 0===e||void 0===i){const a=de(t);if(a){const t=a.getBoundingClientRect(),o=fe(a),r=me(o,"border","width"),l=me(o,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=ue(o.maxWidth,a,"clientWidth"),n=ue(o.maxHeight,a,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||vt,maxHeight:n||vt}}(t,e,i);let{width:l,height:h}=i;if("content-box"===n.boxSizing){const t=me(n,"border","width"),e=me(n,"padding");l-=e.width+t.width,h-=e.height+t.height}return l=Math.max(0,l-a.width),h=Math.max(0,s?Math.floor(l/s):h-a.height),l=be(Math.min(l,o,i.maxWidth)),h=be(Math.min(h,r,i.maxHeight)),l&&!h&&(h=be(l/2)),{width:l,height:h}}function _e(t,e,i){var s=e||1,n=Math.floor(t.height*s),e=Math.floor(t.width*s);t.height=n/s,t.width=e/s;const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==e)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=e,t.ctx.setTransform(s,0,0,s,0,0),!0)}var ye=function(){let t=!1;try{var e={get passive(){return!(t=!0)}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function we(t,e){const i=ge(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Me(t,e){return"native"in t?{x:t.x,y:t.y}:xe(t,e)}function ke(t,i,s,n,a){var o=t.getSortedVisibleDatasetMetas(),r=s[i];for(let t=0,e=o.length;t<e;++t){const{index:s,data:l}=o[t],{lo:h,hi:c}=function(t,e,i,s){const{controller:n,data:a,_sorted:o}=t,r=n._cachedMeta.iScale;if(r&&e===r.axis&&"r"!==e&&o&&a.length){const t=r._reversePixels?ne:se;if(!s)return t(a,e,i);if(n._sharedOptions){const s=a[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(a,e,i-n),o=t(a,e,i+n);return{lo:s.lo,hi:o.hi}}}}return{lo:0,hi:a.length-1}}(o[t],i,r,a);for(let t=h;t<=c;++t){const i=l[t];i.skip||n(i,s,t)}}}function Se(t,s,e,n){const a=[];return Kt(s,t.chartArea,t._minPadding)&&ke(t,e,s,function(t,e,i){t.inRange(s.x,s.y,n)&&a.push({element:t,datasetIndex:e,index:i})},!0),a}function Pe(t,e,i,s,n){return Kt(e,t.chartArea,t._minPadding)?"r"!==i||s?function(a,o,t,r,l){let h=[];const c=function(t){const s=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,e){var i=s?Math.abs(t.x-e.x):0,e=n?Math.abs(t.y-e.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(e,2))}}(t);let d=Number.POSITIVE_INFINITY;return ke(a,t,o,function(t,e,i){var s,n=t.inRange(o.x,o.y,l);r&&!n||(Kt(s=t.getCenterPoint(l),a.chartArea,a._minPadding)||n)&&((s=c(o,s))<d?(h=[{element:t,datasetIndex:e,index:i}],d=s):s===d&&h.push({element:t,datasetIndex:e,index:i}))}),h}(t,e,i,s,n):function(o,r){let l=[];return ke(t,i,o,function(t,e,i){var{startAngle:s,endAngle:n}=t.getProps(["startAngle","endAngle"],r),a=It(t,{x:o.x,y:o.y})["angle"];Vt(a,s,n)&&l.push({element:t,datasetIndex:e,index:i})}),l}(e,n):[]}function De(t,e,i,l){const h=Me(e,t),c=[],d=i.axis,u="x"===d?"inXRange":"inYRange";let f=!1;return function(){var i,s,n,a,o,r=t.getSortedVisibleDatasetMetas();for(let t=0,e=r.length;t<e;++t){({index:i,data:s}=r[t]);for(let t=0,e=s.length;t<e;++t)(o=s[t]).skip||(n=o,a=i,o=t,n[u](h[d],l)&&c.push({element:n,datasetIndex:a,index:o}),n.inRange(h.x,h.y,l)&&(f=!0))}}(),i.intersect&&!f?[]:c}var Ce={modes:{index(t,e,i,s){const n=Me(e,t),a=i.axis||"x",o=i.intersect?Se(t,n,a,s):Pe(t,n,a,!1,s),r=[];return o.length?(t.getSortedVisibleDatasetMetas().forEach(t=>{var e=o[0].index,i=t.data[e];i&&!i.skip&&r.push({element:i,datasetIndex:t.index,index:e})}),r):[]},dataset(t,e,i,s){var n=Me(e,t),e=i.axis||"xy";let a=i.intersect?Se(t,n,e,s):Pe(t,n,e,!1,s);if(0<a.length){const o=a[0].datasetIndex,i=t.getDatasetMeta(o).data;a=[];for(let t=0;t<i.length;++t)a.push({element:i[t],datasetIndex:o,index:t})}return a},point:(t,e,i,s)=>Se(t,Me(e,t),i.axis||"xy",s),nearest:(t,e,i,s)=>Pe(t,Me(e,t),i.axis||"xy",i.intersect,s),x:(t,e,i,s)=>De(t,e,{axis:"x",intersect:i.intersect},s),y:(t,e,i,s)=>De(t,e,{axis:"y",intersect:i.intersect},s)}};const Oe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Ae=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Te(t,e){var i=(""+t).match(Oe);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}function Le(e,i){const t={},s=j(i),n=s?Object.keys(i):i,a=j(e)?s?t=>U(e[t],e[i[t]]):t=>e[t]:()=>e;for(const e of n)t[e]=+a(e)||0;return t}function Re(t){return Le(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ee(t){return Le(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Ie(t){const e=Re(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ze(t,e){e=e||pt.font;let i=U((t=t||{}).size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=U(t.style,e.style);s&&!(""+s).match(Ae)&&(console.warn('Invalid font style specified: "'+s+'"'),s="");const n={family:U(t.family,e.family),lineHeight:Te(U(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:U(t.weight,e.weight),string:""};return n.string=jt(n),n}function Fe(t,e,i,s){let n,a,o,r=!0;for(n=0,a=t.length;n<a;++n)if(o=t[n],void 0!==o&&(void 0!==e&&"function"==typeof o&&(o=o(e),r=!1),void 0!==i&&H(o)&&(o=o[i%o.length],r=!1),void 0!==o))return s&&!r&&(s.cacheable=!1),o}function Be(t,e,i){var{min:s,max:n}=t,t=q(e,(n-s)/2),e=(t,e)=>i&&0===t?0:t+e;return{min:e(s,-Math.abs(t)),max:e(n,t)}}function Ve(t,e){return Object.assign(Object.create(t),e)}const We=["left","top","right","bottom"];function Ne(t,e){return t.filter(t=>t.pos===e)}function He(t,e){return t.filter(t=>-1===We.indexOf(t.pos)&&t.box.axis===e)}function je(t,s){return t.sort((t,e)=>{var i=s?e:t,e=s?t:e;return i.weight===e.weight?i.index-e.index:i.weight-e.weight})}function $e(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function Ye(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Ue(t,i){const s=i.maxPadding;return function(t){const e={left:0,top:0,right:0,bottom:0};return t.forEach(t=>{e[t]=Math.max(i[t],s[t])}),e}(t?["left","right"]:["top","bottom"])}function Xe(t,e,i,s){const n=[];let a,o,r,l,h,c;for(a=0,o=t.length,h=0;a<o;++a){r=t[a],l=r.box,l.update(r.width||e.w,r.height||e.h,Ue(r.horizontal,e));const{same:o,other:d}=function(t,e,i,s){const{pos:n,box:a}=i,o=t.maxPadding;if(!j(n)){i.size&&(t[n]-=i.size);const h=s[i.stack]||{size:0,count:1};h.size=Math.max(h.size,i.horizontal?a.height:a.width),i.size=h.size/h.count,t[n]+=i.size}a.getPadding&&Ye(o,a.getPadding());var r=Math.max(0,e.outerWidth-$e(o,t,"left","right")),l=Math.max(0,e.outerHeight-$e(o,t,"top","bottom")),s=r!==t.w,e=l!==t.h;return t.w=r,t.h=l,i.horizontal?{same:s,other:e}:{same:e,other:s}}(e,i,r,s);h|=o&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&Xe(n,e,i,s)||c}function qe(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function Ke(t,e,i,s){var n=i.padding;let{x:a,y:o}=e;for(const r of t){const t=r.box,l=s[r.stack]||{count:1,placed:0,weight:1},h=r.stackWeight/l.weight||1;if(r.horizontal){const s=e.w*h,a=l.size||t.height;rt(l.start)&&(o=l.start),t.fullSize?qe(t,n.left,o,i.outerWidth-n.right-n.left,a):qe(t,e.left+l.placed,o,s,a),l.start=o,l.placed+=s,o=t.bottom}else{const s=e.h*h,o=l.size||t.width;rt(l.start)&&(a=l.start),t.fullSize?qe(t,a,n.top,o,i.outerHeight-n.bottom-n.top):qe(t,a,e.top+l.placed,o,s),l.start=a,l.placed+=s,a=t.right}}e.x=a,e.y=o}pt.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Ge={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){e=t.boxes?t.boxes.indexOf(e):-1;-1!==e&&t.boxes.splice(e,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(l,t,e,i){if(l){const n=Ie(l.options.layout.padding),a=Math.max(t-n.width,0),o=Math.max(e-n.height,0),r=function(){const t=function(t){const e=[];let i,s,n,a,o,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],{position:a,options:{stack:o,stackWeight:r=1}}=n,e.push({index:i,box:n,pos:a,horizontal:n.isHorizontal(),weight:n.weight,stack:o&&a+o,stackWeight:r});return e}(l.boxes),e=je(t.filter(t=>t.box.fullSize),!0),i=je(Ne(t,"left"),!0),s=je(Ne(t,"right")),n=je(Ne(t,"top"),!0),a=je(Ne(t,"bottom")),o=He(t,"x"),r=He(t,"y");return{fullSize:e,leftAndTop:i.concat(n),rightAndBottom:s.concat(r).concat(a).concat(o),chartArea:Ne(t,"chartArea"),vertical:i.concat(s).concat(r),horizontal:n.concat(a).concat(o)}}(),h=r.vertical,c=r.horizontal;G(l.boxes,t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()});var s=h.reduce((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1,0)||1,e=Object.freeze({outerWidth:t,outerHeight:e,padding:n,availableWidth:a,availableHeight:o,vBoxMaxWidth:a/2/s,hBoxMaxHeight:o/2}),s=Object.assign({},n);Ye(s,Ie(i));const d=Object.assign({maxPadding:s,w:a,h:o,x:n.left,y:n.top},n),u=function(t,e){var i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(t&&We.includes(s)){const a=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});a.count++,a.weight+=n}}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let a,o,r;for(a=0,o=t.length;a<o;++a){r=t[a];const o=r.box["fullSize"],l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:o&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:o&&e.availableHeight)}return i}(h.concat(c),e);Xe(r.fullSize,d,e,u),Xe(h,d,e,u),Xe(c,d,e,u)&&Xe(h,d,e,u),function(i){const s=i.maxPadding;function t(t){var e=Math.max(s[t]-i[t],0);return i[t]+=e,e}i.y+=t("top"),i.x+=t("left"),t("right"),t("bottom")}(d),Ke(r.leftAndTop,d,e,u),d.x+=d.w,d.y+=d.h,Ke(r.rightAndBottom,d,e,u),l.chartArea={left:d.left,top:d.top,right:d.left+d.w,bottom:d.top+d.h,height:d.h,width:d.w},G(r.chartArea,t=>{const e=t.box;Object.assign(e,l.chartArea),e.update(d.w,d.h,{left:0,top:0,right:0,bottom:0})})}}};function Ze(i,a=[""],e=i,s,n=()=>i[0]){rt(s)||(s=ri("_fallback",i));var t={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:i,_rootScopes:e,_fallback:s,_getTarget:n,override:t=>Ze([t,...i],a,e,s)};return new Proxy(t,{deleteProperty:(t,e)=>(delete t[e],delete t._keys,delete i[0][e],!0),get:(t,e)=>ii(t,e,()=>function(t,e,i){var s;for(const n of a)if(s=ri(ti(n,t),e),rt(s))return ei(t,s)?ai(e,i,t,s):s}(e,i,t)),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(i[0]),has:(t,e)=>li(t).includes(e),ownKeys:t=>li(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function Je(s,e,i,n){var t={_cacheable:!1,_proxy:s,_context:e,_subProxy:i,_stack:new Set,_descriptors:Qe(s,n),setContext:t=>Je(s,t,i,n),override:t=>Je(s.override(t),e,i,n)};return new Proxy(t,{deleteProperty:(t,e)=>(delete t[e],delete s[e],!0),get:(t,e,i)=>ii(t,e,()=>function(r,t,e){const{_proxy:i,_context:s,_subProxy:n,_descriptors:a}=r;let o=i[t];return lt(o)&&a.isScriptable(t)&&(o=function(t,e,i){const{_proxy:s,_context:n,_subProxy:a,_stack:o}=r;if(o.has(t))throw new Error("Recursion detected: "+Array.from(o).join("->")+"->"+t);return o.add(t),e=e(n,a||i),o.delete(t),e=ei(t,e)?ai(s._scopes,s,t,e):e}(t,o,e)),H(o)&&o.length&&(o=function(t,e,i,s){const{_proxy:n,_context:a,_subProxy:o,_descriptors:r}=i;if(rt(a.index)&&s(t))e=e[a.index%e.length];else if(j(e[0])){const i=e,s=n._scopes.filter(t=>t!==i);e=[];for(const l of i){const i=ai(s,n,t,l);e.push(Je(i,a,o&&o[t],r))}}return e}(t,o,r,a.isIndexable)),ei(t,o)&&(o=Je(o,s,n&&n[t],a)),o}(t,e,i)),getOwnPropertyDescriptor:(t,e)=>t._descriptors.allKeys?Reflect.has(s,e)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(s,e),getPrototypeOf:()=>Reflect.getPrototypeOf(s),has:(t,e)=>Reflect.has(s,e),ownKeys:()=>Reflect.ownKeys(s),set:(t,e,i)=>(s[e]=i,delete t[e],!0)})}function Qe(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:lt(i)?i:()=>i,isIndexable:lt(s)?s:()=>s}}const ti=(t,e)=>t?t+ot(e):e,ei=(t,e)=>j(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function ii(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];i=i();return t[e]=i}function si(t,e,i){return lt(t)?t(e,i):t}function ni(t,e,i,s,n){for(const r of e){const e=(a=i,o=r,!0===a?o:"string"==typeof a?at(o,a):void 0);if(e){t.add(e);a=si(e._fallback,i,n);if(rt(a)&&a!==i&&a!==s)return a}else if(!1===e&&rt(s)&&i!==s)return null}var a,o;return!1}function ai(t,s,e,i){const n=s._rootScopes,a=si(s._fallback,e,i),o=[...t,...n],r=new Set;r.add(i);t=oi(r,o,e,a||e,i);return null!==t&&(!rt(a)||a===e||null!==(t=oi(r,o,a,t,i)))&&Ze(Array.from(r),[""],n,a,()=>function(t,e){const i=s._getTarget();t in i||(i[t]={});t=i[t];return H(t)&&j(e)?e:t}(e,i))}function oi(t,e,i,s,n){for(;i;)i=ni(t,e,i,s,n);return i}function ri(t,e){for(const i of e)if(i){const e=i[t];if(rt(e))return e}}function li(t){let e=t._keys;return e=e||(t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter(t=>!t.startsWith("_")))e.add(t);return Array.from(e)}(t._scopes)),e}const hi=Number.EPSILON||1e-14,ci=(t,e)=>e<t.length&&!t[e].skip&&t[e],di=t=>"x"===t?"y":"x";function ui(t,e,i,s){var n=t.skip?e:t,a=e,t=i.skip?e:i,e=zt(a,n),i=zt(t,a);let o=e/(e+i),r=i/(e+i);o=isNaN(o)?0:o,r=isNaN(r)?0:r;i=s*o,s*=r;return{previous:{x:a.x-i*(t.x-n.x),y:a.y-i*(t.y-n.y)},next:{x:a.x+s*(t.x-n.x),y:a.y+s*(t.y-n.y)}}}function fi(t,e="x"){const i=di(e),s=t.length,n=Array(s).fill(0),a=Array(s);let o,r,l,h=ci(t,0);for(o=0;o<s;++o)if(r=l,l=h,h=ci(t,o+1),l){if(h){const t=h[e]-l[e];n[o]=0!=t?(h[i]-l[i])/t:0}a[o]=r?h?St(n[o-1])!==St(n[o])?0:(n[o-1]+n[o])/2:n[o-1]:n[o]}!function(e,i,s){var n=e.length;let a,o,r,l,h,c=ci(e,0);for(let t=0;t<n-1;++t)h=c,c=ci(e,t+1),h&&c&&(Ot(i[t],0,hi)?s[t]=s[t+1]=0:(a=s[t]/i[t],o=s[t+1]/i[t],(l=Math.pow(a,2)+Math.pow(o,2))<=9||(r=3/Math.sqrt(l),s[t]=a*r*i[t],s[t+1]=o*r*i[t])))}(t,n,a),function(e,i,s="x"){const n=di(s),a=e.length;let o,r,l,h=ci(e,0);for(let t=0;t<a;++t)if(r=l,l=h,h=ci(e,t+1),l){const a=l[s],c=l[n];r&&(o=(a-r[s])/3,l[`cp1${s}`]=a-o,l[`cp1${n}`]=c-o*i[t]),h&&(o=(h[s]-a)/3,l[`cp2${s}`]=a+o,l[`cp2${n}`]=c+o*i[t])}}(t,a,e)}function gi(t,e,i){return Math.max(Math.min(t,i),e)}function pi(e,i,t,s,n){let a,o,r,l;if(i.spanGaps&&(e=e.filter(t=>!t.skip)),"monotone"===i.cubicInterpolationMode)fi(e,n);else{let t=s?e[e.length-1]:e[0];for(a=0,o=e.length;a<o;++a)r=e[a],l=ui(t,r,e[Math.min(a+1,o-(s?0:1))%o],i.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,t=r}i.capBezierPoints&&function(t,e){let i,s,n,a,o,r=Kt(t[0],e);for(i=0,s=t.length;i<s;++i)o=a,a=r,r=i<s-1&&Kt(t[i+1],e),a&&(n=t[i],o&&(n.cp1x=gi(n.cp1x,e.left,e.right),n.cp1y=gi(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=gi(n.cp2x,e.left,e.right),n.cp2y=gi(n.cp2y,e.top,e.bottom)))}(e,t)}const mi=t=>0===t||1===t,xi=(t,e,i)=>-Math.pow(2,10*--t)*Math.sin((t-e)*xt/i),bi=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*xt/i)+1,vi={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>--t*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-(--t*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>--t*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*yt),easeOutSine:t=>Math.sin(t*yt),easeInOutSine:t=>-.5*(Math.cos(mt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>mi(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>1<=t?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1- --t*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>mi(t)?t:xi(t,.075,.3),easeOutElastic:t=>mi(t)?t:bi(t,.075,.3),easeInOutElastic(t){return mi(t)?t:t<.5?.5*xi(2*t,.1125,.45):.5+.5*bi(2*t-1,.1125,.45)},easeInBack(t){return t*t*(2.70158*t-1.70158)},easeOutBack(t){return--t*t*(2.70158*t+1.70158)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-vi.easeOutBounce(1-t),easeOutBounce(t){var e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*vi.easeInBounce(2*t):.5*vi.easeOutBounce(2*t-1)+.5};function _i(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function yi(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:("middle"===s?i<.5?t:e:"after"===s?i<1?t:e:0<i?e:t).y}}function wi(t,e,i,s){var n={x:t.cp2x,y:t.cp2y},a={x:e.cp1x,y:e.cp1y},t=_i(t,n,i),n=_i(n,a,i),e=_i(a,e,i),t=_i(t,n,i),e=_i(n,e,i);return _i(t,e,i)}const Mi=new Map;function ki(t,e,n){return function(t,e){e=n||{};var i=t+JSON.stringify(e);let s=Mi.get(i);return s||(s=new Intl.NumberFormat(t,e),Mi.set(i,s)),s}(e).format(t)}function Si(t,e,i){return t?(s=e,n=i,{x:t=>s+s+n-t,setWidth(t){n=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t};var s,n}function Pi(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function Di(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Ci(t){return"angle"===t?{between:Vt,compare:Ft,normalize:Bt}:{between:Ht,compare:(t,e)=>t-e,normalize:t=>t}}function Oi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function Ai(t,i,f){if(!f)return[t];const{property:s,start:n,end:a}=f,o=i.length,{compare:r,between:l,normalize:h}=Ci(s),{start:c,end:d,loop:u,style:g}=function(t,e){const{property:i,start:s,end:n}=f,{between:a,normalize:o}=Ci(i),r=e.length;let l,h,{start:c,end:d,loop:u}=t;if(u){for(c+=r,d+=r,l=0,h=r;l<h&&a(o(e[c%r][i]),s,n);++l)c--,d--;c%=r,d%=r}return d<c&&(d+=r),{start:c,end:d,loop:u,style:t.style}}(t,i),p=[];let m,x,b,v,_=null;for(let t=c,e=c;t<=d;++t)(x=i[t%o]).skip||(m=h(x[s]),m!==b&&(v=l(m,n,a),null===_&&(v||l(n,b,m)&&0!==r(n,b))&&(_=0===r(m,n)?t:e),null===_||v&&0!==r(a,m)&&!l(a,b,m)||(p.push(Oi({start:_,end:t,loop:u,count:o,style:g})),_=null),e=t,b=m));return null!==_&&p.push(Oi({start:_,end:d,loop:u,count:o,style:g})),p}function Ti(e,i){const s=[],n=e.segments;for(let t=0;t<n.length;t++){var a=Ai(n[t],e.points,i);a.length&&s.push(...a)}return s}function Li(t,e){var i=t.points,a=t.options.spanGaps,s=i.length;if(!s)return[];var n=!!t._loop,{start:o,end:r}=function(t,e,i){let s=0,n=e-1;if(i&&!a)for(;s<e&&!t[s].skip;)s++;for(;s<e&&t[s].skip;)s++;for(s%=e,i&&(n+=s);n>s&&t[n%e].skip;)n--;return n%=e,{start:s,end:n}}(i,s,n);return Ri(t,!0===a?[{start:o,end:r,loop:n}]:function(t,e,i,s){const n=t.length,a=[];let o,r=e,l=t[e];for(o=e+1;o<=i;++o){const i=t[o%n];i.skip||i.stop?l.skip||(s=!1,a.push({start:e%n,end:(o-1)%n,loop:s}),e=r=i.stop?o:null):(r=o,l.skip&&(e=o)),l=i}return null!==r&&a.push({start:e%n,end:r%n,loop:s}),a}(i,o,r<o?r+s:r,!!t._fullLoop&&0===o&&r===s-1),i,e)}function Ri(t,e,i,s){return s&&s.setContext&&i?function(i,t,a,s){const n=i._chart.getContext(),e=Ei(i.options),{_datasetIndex:o,options:{spanGaps:r}}=i,l=a.length,h=[];let c=e,d=t[0].start,u=d;function f(t,e,i,s){var n=r?-1:1;if(t!==e){for(t+=l;a[t%l].skip;)t-=n;for(;a[e%l].skip;)e+=n;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:i,style:s}),c=s,d=e%l)}}for(const i of t){d=r?d:i.start;let t,e=a[d%l];for(u=d+1;u<=i.end;u++){const r=a[u%l];t=Ei(s.setContext(Ve(n,{type:"segment",p0:e,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:o}))),g=t,(p=c)&&JSON.stringify(g)!==JSON.stringify(p)&&f(d,u-1,i.loop,c),e=r,c=t}d<u-1&&f(d,u-1,i.loop,c)}var g,p;return h}(t,e,i,s):e}function Ei(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}var Ii=Object.freeze({__proto__:null,easingEffects:vi,color:B,getHoverColor:V,noop:t,uid:W,isNullOrUndef:N,isArray:H,isObject:j,isFinite:$,finiteOrDefault:Y,valueOrDefault:U,toPercentage:X,toDimension:q,callback:K,each:G,_elementsEqual:Z,clone:J,_merger:tt,merge:et,mergeIf:it,_mergerIf:st,_deprecated:function(t,e,i,s){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+s+'" instead')},resolveObjectKey:at,_capitalize:ot,defined:rt,isFunction:lt,setsEqual:ht,_isClickEvent:ct,toFontString:jt,_measureText:$t,_longestText:Yt,_alignPixel:Ut,clearCanvas:Xt,drawPoint:qt,_isPointInArea:Kt,clipArea:Gt,unclipArea:Zt,_steppedLineTo:Jt,_bezierCurveTo:Qt,renderText:te,addRoundedRectPath:ee,_lookup:ie,_lookupByKey:se,_rlookupByKey:ne,_filterBetween:ae,listenArrayEvents:re,unlistenArrayEvents:le,_arrayUnique:he,_createResolver:Ze,_attachContext:Je,_descriptors:Qe,splineCurve:ui,splineCurveMonotone:fi,_updateBezierControlPoints:pi,_isDomSupported:ce,_getParentNode:de,getStyle:ge,getRelativePosition:xe,getMaximumSize:ve,retinaScale:_e,supportsEventListenerOptions:ye,readUsedSize:we,fontString:function(t,e,i){return e+" "+t+"px "+i},requestAnimFrame:o,throttled:l,debounce:h,_toLeftRightCenter:f,_alignStartEnd:P,_textX:D,_pointInLine:_i,_steppedInterpolation:yi,_bezierInterpolation:wi,formatNumber:ki,toLineHeight:Te,_readValueToProps:Le,toTRBL:Re,toTRBLCorners:Ee,toPadding:Ie,toFont:ze,resolve:Fe,_addGrace:Be,createContext:Ve,PI:mt,TAU:xt,PITAU:bt,INFINITY:vt,RAD_PER_DEG:_t,HALF_PI:yt,QUARTER_PI:wt,TWO_THIRDS_PI:Mt,log10:kt,sign:St,niceNum:Pt,_factorize:Dt,isNumber:Ct,almostEquals:Ot,almostWhole:At,_setMinAndMaxByKey:Tt,toRadians:Lt,toDegrees:Rt,_decimalPlaces:Et,getAngleFromPoint:It,distanceBetweenPoints:zt,_angleDiff:Ft,_normalizeAngle:Bt,_angleBetween:Vt,_limitValue:Wt,_int16Range:Nt,_isBetween:Ht,getRtlAdapter:Si,overrideTextDirection:Pi,restoreTextDirection:Di,_boundSegment:Ai,_boundSegments:Ti,_computeSegments:Li});class zi{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class Fi extends zi{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Bi={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Vi=t=>null===t||""===t,Wi=!!ye&&{passive:!0};function Ni(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function Hi(t,e,i){const s=t.canvas,n=new MutationObserver(t=>{let e=!1;for(const i of t)e=e||Ni(i.addedNodes,s),e=e&&!Ni(i.removedNodes,s);e&&i()});return n.observe(document,{childList:!0,subtree:!0}),n}function ji(t,e,i){const s=t.canvas,n=new MutationObserver(t=>{let e=!1;for(const i of t)e=e||Ni(i.removedNodes,s),e=e&&!Ni(i.addedNodes,s);e&&i()});return n.observe(document,{childList:!0,subtree:!0}),n}const $i=new Map;let Yi=0;function Ui(){const i=window.devicePixelRatio;i!==Yi&&(Yi=i,$i.forEach((t,e)=>{e.currentDevicePixelRatio!==i&&t()}))}function Xi(t,e,s){const i=t.canvas,n=i&&de(i);if(n){const o=l((t,e)=>{var i=n.clientWidth;s(t,e),i<n.clientWidth&&s()},window),r=new ResizeObserver(t=>{var e=t[0],t=e.contentRect.width,e=e.contentRect.height;0===t&&0===e||o(t,e)});return r.observe(n),a=t,t=o,$i.size||window.addEventListener("resize",Ui),$i.set(a,t),r;var a}}function qi(t,e,i){i&&i.disconnect(),"resize"===e&&(t=t,$i.delete(t),$i.size||window.removeEventListener("resize",Ui))}function Ki(e,t,i){var s=e.canvas,n=l(t=>{null!==e.ctx&&i(function(t,e){var i=Bi[t.type]||t.type,{x:s,y:n}=xe(t,e);return{type:i,chart:e,native:t,x:void 0!==s?s:null,y:void 0!==n?n:null}}(t,e))},e,t=>{t=t[0];return[t,t.offsetX,t.offsetY]});return s.addEventListener(t,n,Wi),n}class Gi extends zi{acquireContext(t,e){var i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,s=t.getAttribute("height"),n=t.getAttribute("width");if(t.$chartjs={initial:{height:s,width:n,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",Vi(n)){const e=we(t,"width");void 0!==e&&(t.width=e)}if(Vi(s))if(""===t.style.height)t.height=t.width/(e||2);else{const e=we(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const i=t.canvas;if(!i.$chartjs)return!1;const s=i.$chartjs.initial;["height","width"].forEach(t=>{var e=s[t];N(e)?i.removeAttribute(t):i.setAttribute(t,e)});const e=s.style||{};return Object.keys(e).forEach(t=>{i.style[t]=e[t]}),i.width=i.width,delete i.$chartjs,!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:Hi,detach:ji,resize:Xi}[e]||Ki;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:qi,detach:qi,resize:qi}[e]||function(t,e,i){t.canvas.removeEventListener(e,i,Wi)})(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,s){return ve(t,e,i,s)}isAttached(t){t=de(t);return!(!t||!t.isConnected)}}function Zi(t){return!ce()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Fi:Gi}var Ji=Object.freeze({__proto__:null,_detectPlatform:Zi,BasePlatform:zi,BasicPlatform:Fi,DomPlatform:Gi});const Qi="transparent",ts={boolean:(t,e,i)=>.5<i?e:t,color(t,e,i){const s=B(t||Qi),n=s.valid&&B(e||Qi);return n&&n.valid?n.mix(s,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class es{constructor(t,e,i,s){var n=e[i];s=Fe([t.to,s,n,t.from]);n=Fe([t.from,n,s]);this._active=!0,this._fn=t.fn||ts[t.type||typeof n],this._easing=vi[t.easing]||vi.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=n,this._to=s,this._promises=void 0}active(){return this._active}update(t,e,i){var s,n,a;this._active&&(this._notify(!1),s=this._target[this._prop],n=i-this._start,a=this._duration-n,this._start=i,this._duration=Math.floor(Math.max(a,t.duration)),this._total+=n,this._loop=!!t.loop,this._to=Fe([t.to,e,s,t.from]),this._from=Fe([t.from,s,e]))}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){var e=t-this._start,i=this._duration,s=this._prop,n=this._from,a=this._loop,t=this._to;let o;if(this._active=n!==t&&(a||e<i),!this._active)return this._target[s]=t,void this._notify(!0);e<0?this._target[s]=n:(o=e/i%2,o=a&&1<o?2-o:o,o=this._easing(Math.min(1,Math.max(0,o))),this._target[s]=this._fn(n,t,o))}wait(){const i=this._promises||(this._promises=[]);return new Promise((t,e)=>{i.push({res:t,rej:e})})}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}pt.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const is=Object.keys(pt.animation);pt.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),pt.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),pt.describe("animations",{_fallback:"animation"}),pt.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class ss{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(s){if(j(s)){const n=this._properties;Object.getOwnPropertyNames(s).forEach(e=>{const t=s[e];if(j(t)){const i={};for(const s of is)i[s]=t[s];(H(t.properties)&&t.properties||[e]).forEach(t=>{t!==e&&n.has(t)||n.set(t,i)})}})}}_animateOptions(t,e){const i=e.options,s=function(e,i){if(i){let t=e.options;if(t)return t.$shared&&(e.options=t=Object.assign({},t,{$shared:!1,$animations:{}})),t;e.options=i}}(t,i);if(!s)return[];e=this._createAnimations(s,i);return i.$shared&&function(e,t){const i=[],s=Object.keys(t);for(let t=0;t<s.length;t++){const n=e[s[t]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then(()=>{t.options=i},()=>{}),e}_createAnimations(e,i){const s=this._properties,n=[],a=e.$animations||(e.$animations={}),t=Object.keys(i),o=Date.now();let r;for(r=t.length-1;0<=r;--r){const c=t[r];if("$"!==c.charAt(0))if("options"!==c){var l=i[c];let t=a[c];var h=s.get(c);if(t){if(h&&t.active()){t.update(h,l,o);continue}t.cancel()}h&&h.duration?(a[c]=t=new es(h,e,c,l),n.push(t)):e[c]=l}else n.push(...this._animateOptions(e,i))}return n}update(t,e){if(0!==this._properties.size){var i=this._createAnimations(t,e);return i.length?(c.add(this._chart,i),!0):void 0}Object.assign(t,e)}}function ns(t,e){var i=t&&t.options||{},s=i.reverse,t=void 0===i.min?e:0,e=void 0===i.max?e:0;return{start:s?e:t,end:s?t:e}}function as(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,a;for(n=0,a=s.length;n<a;++n)i.push(s[n].index);return i}function os(t,e,i,s={}){var n=t.keys,a="single"===s.mode;let o,r,l,h;if(null!==e){for(o=0,r=n.length;o<r;++o){if((l=+n[o])===i){if(s.all)continue;break}h=t.values[l],$(h)&&(a||0===e||St(e)===St(h))&&(e+=h)}return e}}function rs(t,e){t=t&&t.options.stacked;return t||void 0===t&&void 0!==e.stack}function ls(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&0<e||!i&&e<0)return n.index}return null}function hs(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:a,vScale:o,index:r}=s,l=a.axis,h=o.axis,c=`${a.id}.${o.id}.${s.stack||s.type}`,d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:a,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=function(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}(n,c,a),u[r]=d,u._top=ls(u,o,!0,s.type),u._bottom=ls(u,o,!1,s.type)}}function cs(t,e){const i=t.scales;return Object.keys(i).filter(t=>i[t].axis===e).shift()}function ds(t,e){var i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i]}}}const us=t=>"reset"===t||"none"===t,fs=(t,e)=>e?t:Object.assign({},t);class gs{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=rs(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&ds(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),s=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,n=e.xAxisID=U(i.xAxisID,cs(t,"x")),a=e.yAxisID=U(i.yAxisID,cs(t,"y")),o=e.rAxisID=U(i.rAxisID,cs(t,"r")),r=e.indexAxis,l=e.iAxisID=s(r,n,a,o),h=e.vAxisID=s(r,a,n,o);e.xScale=this.getScaleForId(n),e.yScale=this.getScaleForId(a),e.rScale=this.getScaleForId(o),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(h)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){var e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){var t=this._cachedMeta;this._data&&le(this._data,this),t._stacked&&ds(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if(j(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,a;for(s=0,n=e.length;s<n;++s)a=e[s],i[s]={x:a,y:t[a]};return i}(e);else if(i!==e){if(i){le(i,this);const t=this._cachedMeta;ds(t),t._parsed=[]}e&&Object.isExtensible(e)&&re(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();var n=e._stacked;e._stacked=rs(e.vScale,e),e.stack!==i.stack&&(s=!0,ds(e),e.stack=i.stack),this._resyncElements(t),!s&&n===e._stacked||hs(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:s}=this,{iScale:n,_stacked:a}=i,o=n.axis;let r,l,h,c=0===t&&e===s.length||i._sorted,d=0<t&&i._parsed[t-1];if(!1===this._parsing)i._parsed=s,i._sorted=!0,h=s;else{h=H(s[t])?this.parseArrayData(i,s,t,e):j(s[t])?this.parseObjectData(i,s,t,e):this.parsePrimitiveData(i,s,t,e);const n=()=>null===l[o]||d&&l[o]<d[o];for(r=0;r<e;++r)i._parsed[r+t]=l=h[r],c&&(n()&&(c=!1),d=l);i._sorted=c}a&&hs(this,h)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:a}=t,o=n.axis,r=a.axis,l=n.getLabels(),h=n===a,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[o]:h||n.parse(l[f],f),[r]:a.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:a}=t,o=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)c=e[h=r+i],o[r]={x:n.parse(c[0],h),y:a.parse(c[1],h)};return o}parseObjectData(t,e,i,s){const{xScale:n,yScale:a}=t,{xAxisKey:o="x",yAxisKey:r="y"}=this._parsing,l=new Array(s);let h,c,d,u;for(h=0,c=s;h<c;++h)u=e[d=h+i],l[h]={x:n.parse(at(u,o),d),y:a.parse(at(u,r),d)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){var s=this.chart,n=this._cachedMeta,a=e[t.axis];return os({keys:as(s,!0),values:e._stacks[t.axis]},a,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){var n=i[e.axis];let a=null===n?NaN:n;e=s&&i._stacks[e.axis];s&&e&&(s.values=e,a=os(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,a),t.max=Math.max(t.max,a)}getMinMax(e,t){const i=this._cachedMeta,s=i._parsed,n=i._sorted&&e===i.iScale,a=s.length,o=this._getOtherScale(e),r=(d=this.chart,t&&!i.hidden&&i._stacked&&{keys:as(d,!0),values:null}),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:h,max:c}=function(){var{min:t,max:e,minDefined:i,maxDefined:s}=o.getUserBounds();return{min:i?t:Number.NEGATIVE_INFINITY,max:s?e:Number.POSITIVE_INFINITY}}();var d;let u,f;function g(){f=s[u];var t=f[o.axis];return!$(f[e.axis])||h>t||c<t}for(u=0;u<a&&(g()||(this.updateRangeFromParsed(l,e,f,r),!n));++u);if(n)for(u=a-1;0<=u;--u)if(!g()){this.updateRangeFromParsed(l,e,f,r);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let s,n,a;for(s=0,n=e.length;s<n;++s)a=e[s][t.axis],$(a)&&i.push(a);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,s,n;return j(t)?(e=t.top,i=t.right,s=t.bottom,n=t.left):e=i=s=n=t,{top:e,right:i,bottom:s,left:n,disabled:!1===t}}(U(this.options.clip,function(t,e,i){if(!1===i)return!1;t=ns(t,i),i=ns(e,i);return{top:i.end,right:t.end,bottom:i.start,left:t.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,a=[],o=this._drawStart||0,r=this._drawCount||s.length-o,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,o,r),h=o;h<o+r;++h){const e=s[h];e.hidden||(e.active&&l?a.push(e):e.draw(t,n))}for(h=0;h<a.length;++h)a[h].draw(t,n)}getStyle(t,e){e=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(e):this.resolveDataElementOptions(t||0,e)}getContext(t,e,i){var s,n=this.getDataset();let a;if(0<=t&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];a=e.$context||(e.$context=Ve(this.getContext(),{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:e,index:t,mode:"default",type:"data"})),a.parsed=this.getParsed(t),a.raw=n.data[t],a.index=a.dataIndex=t}else a=this.$context||(this.$context=(s=this.chart.getContext(),t=this.index,Ve(s,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"}))),a.dataset=n,a.index=a.datasetIndex=this.index;return a.active=!!e,a.mode=i,a}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const s="active"===e,n=this._cachedDataOpts,a=t+"-"+e,o=n[a],r=this.enableOptionSharing&&rt(i);if(o)return fs(o,r);const l=this.chart.config,h=l.datasetElementScopeKeys(this._type,t),c=s?[`${t}Hover`,"hover",t,""]:[t,""],d=l.getOptionScopes(this.getDataset(),h),u=Object.keys(pt.elements[t]),f=l.resolveNamedOptions(d,u,()=>this.getContext(i,s),c);return f.$shared&&(f.$shared=r,n[a]=Object.freeze(fs(f,r))),f}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,a=`animation-${e}`,o=n[a];if(o)return o;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),a=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(a,this.getContext(t,i,e))}e=new ss(s,r&&r.animations);return r&&r._cacheable&&(n[a]=Object.freeze(e)),e}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||us(t)||this.chart._animationsDisabled}updateElement(t,e,i,s){us(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!us(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;var n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){var t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){var t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];var s=i.length,n=e.length,a=Math.min(n,s);a&&this.parse(0,a),s<n?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,a=t+e;let o;var r=t=>{for(t.length+=e,o=t.length-1;o>=a;o--)t[o]=t[o-e]};for(r(n),o=t;o<a;++o)n[o]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;var s;this._parsing&&(s=i._parsed.splice(t,e),i._stacked&&ds(i,s)),i.data.splice(t,e)}_sync(t){var e,i,s;this._parsing?this._syncList.push(t):([e,i,s]=t,this[e](i,s)),this.chart._dataChanges.push([this.index,...t])}_onDataPush(){var t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);e=arguments.length-2;e&&this._sync(["_insertElements",t,e])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}gs.defaults={},gs.prototype.datasetElementType=null,gs.prototype.dataElementType=null;class ps{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){var{x:e,y:t}=this.getProps(["x","y"],t);return{x:e,y:t}}hasValue(){return Ct(this.x)&&Ct(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach(t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]}),s}}ps.defaults={},ps.defaultRoutes=void 0;const ms={values:t=>H(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";var s=this.chart.options.locale;let n,a=t;if(1<i.length){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||1e15<e)&&(n="scientific"),a=function(t){let e=3<i.length?i[2].value-i[1].value:i[1].value-i[0].value;return 1<=Math.abs(e)&&t!==Math.floor(t)&&(e=t-Math.floor(t)),e}(t)}var o=kt(Math.abs(a)),o=Math.max(Math.min(-1*Math.floor(o),20),0),o={notation:n,minimumFractionDigits:o,maximumFractionDigits:o};return Object.assign(o,this.options.ticks.format),ki(t,s,o)},logarithmic(t,e,i){if(0===t)return"0";var s=t/Math.pow(10,Math.floor(kt(t)));return 1==s||2==s||5==s?ms.numeric.call(this,t,e,i):""}};var xs={formatters:ms};function bs(t,i){const e=t.options.ticks,s=e.maxTicksLimit||(c=(h=t).options.offset,t=h._tickSize(),c=h._length/t+(c?0:1),t=h._maxLength/t,Math.floor(Math.min(c,t))),n=e.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(i):[],a=n.length,o=n[0],r=n[a-1],l=[];var h,c;if(a>s)return function(t,e,i,s){let n,a=0,o=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===o&&(e.push(t[n]),a++,o=i[a*s])}(i,l,n,a/s),l;var d=function(t,i,e){var t=function(t){var e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),s=i.length/e;if(!t)return Math.max(s,1);var n=Dt(t);for(let t=0,e=n.length-1;t<e;t++){const i=n[t];if(i>s)return i}return Math.max(s,1)}(n,i,s);if(0<a){let t,e;const s=1<a?Math.round((r-o)/(a-1)):null;for(vs(i,l,d,N(s)?0:o-s,o),t=0,e=a-1;t<e;t++)vs(i,l,d,n[t],n[t+1]);return vs(i,l,d,r,N(s)?i.length:r+s),l}return vs(i,l,d),l}function vs(t,e,i,s,n){var a=U(s,0),o=Math.min(U(n,t.length),t.length);let r,l,h,c=0;for(i=Math.ceil(i),n&&(i=(r=n-s)/Math.floor(r/i)),h=a;h<0;)c++,h=Math.round(a+c*i);for(l=Math.max(a,0);l<o;l++)l===h&&(e.push(t[l]),c++,h=Math.round(a+c*i))}pt.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:xs.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),pt.route("scale.ticks","color","","color"),pt.route("scale.grid","color","","borderColor"),pt.route("scale.grid","borderColor","","borderColor"),pt.route("scale.title","color","","color"),pt.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),pt.describe("scales",{_fallback:"scale"}),pt.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const _s=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i;function ys(t,e){const i=[],s=t.length/e,n=t.length;let a=0;for(;a<n;a+=s)i.push(t[Math.floor(a)]);return i}function ws(t){return t.drawTicks?t.tickLength:0}function Ms(t,e){if(!t.display)return 0;var i=ze(t.font,e),e=Ie(t.padding);return(H(t.text)?t.text.length:1)*i.lineHeight+e.height}class ks extends ps{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){var{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:s}=this,t=Y(t,Number.POSITIVE_INFINITY),e=Y(e,Number.NEGATIVE_INFINITY),i=Y(i,Number.POSITIVE_INFINITY),s=Y(s,Number.NEGATIVE_INFINITY);return{min:Y(t,i),max:Y(e,s),minDefined:$(t),maxDefined:$(e)}}getMinMax(i){let s,{min:n,max:a,minDefined:o,maxDefined:r}=this.getUserBounds();if(o&&r)return{min:n,max:a};const l=this.getMatchingVisibleMetas();for(let t=0,e=l.length;t<e;++t)s=l[t].controller.getMinMax(this,i),o||(n=Math.min(n,s.min)),r||(a=Math.max(a,s.max));return n=r&&n>a?a:n,a=o&&n>a?n:a,{min:Y(n,Y(a,n)),max:Y(a,Y(n,a))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){K(this.options.beforeUpdate,[this])}update(t,e,i){var{beginAtZero:s,grace:n,ticks:a}=this.options,o=a.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=Be(this,n,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();s=o<this.ticks.length;this._convertTicksToLabels(s?ys(this.ticks,o):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),a.display&&(a.autoSkip||"auto"===a.source)&&(this.ticks=bs(this,this.ticks),this._labelSizes=null),s&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){K(this.options.afterUpdate,[this])}beforeSetDimensions(){K(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){K(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),K(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){K(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){var e=this.options.ticks;let i,s,n;for(i=0,s=t.length;i<s;i++)n=t[i],n.label=K(e.callback,[n.value,i,t],this)}afterTickToLabelConversion(){K(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){K(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){var t,e,i,s,n=this.options,a=n.ticks,o=this.ticks.length,r=a.minRotation||0,l=a.maxRotation;let h,c,d,u=r;!this._isVisible()||!a.display||l<=r||o<=1||!this.isHorizontal()?this.labelRotation=r:(e=(t=this._getLabelSizes()).widest.width,i=t.highest.height,s=Wt(this.chart.width-e,0,this.maxWidth),(n.offset?this.maxWidth/o:s/(o-1))<e+6&&(h=s/(o-(n.offset?.5:1)),c=this.maxHeight-ws(n.grid)-a.padding-Ms(n.title,this.chart.options.font),d=Math.sqrt(e*e+i*i),u=Rt(Math.min(Math.asin(Wt((t.highest.height+6)/h,-1,1)),Math.asin(Wt(c/d,-1,1))-Math.asin(Wt(i/d,-1,1)))),u=Math.max(r,Math.min(l,u))),this.labelRotation=u)}afterCalculateLabelRotation(){K(this.options.afterCalculateLabelRotation,[this])}beforeFit(){K(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:s,grid:n}}=this,a=this._isVisible(),o=this.isHorizontal();if(a){const a=Ms(s,e.options.font);if(o?(t.width=this.maxWidth,t.height=ws(n)+a):(t.height=this.maxHeight,t.width=ws(n)+a),i.display&&this.ticks.length){const{first:e,last:s,widest:n,highest:a}=this._getLabelSizes(),r=2*i.padding,l=Lt(this.labelRotation),h=Math.cos(l),c=Math.sin(l);if(o){const e=i.mirror?0:c*n.width+h*a.height;t.height=Math.min(this.maxHeight,t.height+e+r)}else{const e=i.mirror?0:h*n.width+c*a.height;t.width=Math.min(this.maxWidth,t.width+e+r)}this._calculatePadding(e,s,c,h)}}this._handleMargins(),o?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(i,s,n,a){const{ticks:{align:o,padding:r},position:l}=this.options,h=0!==this.labelRotation,c="top"!==l&&"x"===this.axis;if(this.isHorizontal()){const l=this.getPixelForTick(0)-this.left,d=this.right-this.getPixelForTick(this.ticks.length-1);let t=0,e=0;h?e=c?(t=a*i.width,n*s.height):(t=n*i.height,a*s.width):"start"===o?e=s.width:"end"===o?t=i.width:(t=i.width/2,e=s.width/2),this.paddingLeft=Math.max((t-l+r)*this.width/(this.width-l),0),this.paddingRight=Math.max((e-d+r)*this.width/(this.width-d),0)}else{let t=s.height/2,e=i.height/2;"start"===o?(t=0,e=i.height):"end"===o&&(t=s.height,e=0),this.paddingTop=t+r,this.paddingBottom=e+r}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){K(this.options.afterFit,[this])}isHorizontal(){var{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)N(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){var i=this.options.ticks.sampleSize;let t=this.ticks;i<t.length&&(t=ys(t,i)),this._labelSizes=e=this._computeLabelSizes(t,t.length)}return e}_computeLabelSizes(t,e){const{ctx:i,_longestTextCache:s}=this,n=[],a=[];let o,r,l,h,c,d,u,f,g,p,m,x=0,b=0;for(o=0;o<e;++o){if(h=t[o].label,c=this._resolveTickFontOptions(o),i.font=d=c.string,u=s[d]=s[d]||{data:{},gc:[]},f=c.lineHeight,g=p=0,N(h)||H(h)){if(H(h))for(r=0,l=h.length;r<l;++r)N(m=h[r])||H(m)||(g=$t(i,u.data,u.gc,g,m),p+=f)}else g=$t(i,u.data,u.gc,g,h),p=f;n.push(g),a.push(p),x=Math.max(g,x),b=Math.max(p,b)}var v;w=s,v=e,G(w,t=>{const e=t.gc,i=e.length/2;let s;if(v<i){for(s=0;s<i;++s)delete t.data[e[s]];e.splice(0,i)}});var _=n.indexOf(x),y=a.indexOf(b),w=t=>({width:n[t]||0,height:a[t]||0});return{first:w(0),last:w(e-1),widest:w(_),highest:w(y),widths:n,heights:a}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);t=this._startPixel+t*this._length;return Nt(this._alignToPixels?Ut(this.chart,t,0):t)}getDecimalForPixel(t){t=(t-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){var{min:t,max:e}=this;return t<0&&e<0?e:0<t&&0<e?t:0}getContext(t){var e=this.ticks||[];if(0<=t&&t<e.length){const i=e[t];return i.$context||(i.$context=Ve(this.getContext(),{tick:i,index:t,type:"tick"}))}return this.$context||(this.$context=Ve(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){var t=this.options.ticks,e=Lt(this.labelRotation),i=Math.abs(Math.cos(e)),s=Math.abs(Math.sin(e)),n=this._getLabelSizes(),e=t.autoSkipPadding||0,t=n?n.widest.width+e:0,e=n?n.highest.height+e:0;return this.isHorizontal()?t*s<e*i?t/i:e/s:e*s<t*i?e/i:t/s}_isVisible(){var t=this.options.display;return"auto"!==t?!!t:0<this.getMatchingVisibleMetas().length}_computeGridLineItems(t){function e(t){return Ut(s,t,f)}const i=this.axis,s=this.chart,n=this.options,{grid:a,position:o}=n,r=a.offset,l=this.isHorizontal(),h=this.ticks.length+(r?1:0),c=ws(a),d=[],u=a.setContext(this.getContext()),f=u.drawBorder?u.borderWidth:0,g=f/2;let p,m,x,b,v,_,y,w,M,k,S,P;if("top"===o)p=e(this.bottom),_=this.bottom-c,w=p-g,k=e(t.top)+g,P=t.bottom;else if("bottom"===o)p=e(this.top),k=t.top,P=e(t.bottom)-g,_=p+g,w=this.top+c;else if("left"===o)p=e(this.right),v=this.right-c,y=p-g,M=e(t.left)+g,S=t.right;else if("right"===o)p=e(this.left),M=t.left,S=e(t.right)-g,v=p+g,y=this.left+c;else if("x"===i){if("center"===o)p=e((t.top+t.bottom)/2+.5);else if(j(o)){const C=Object.keys(o)[0],i=o[C];p=e(this.chart.scales[C].getPixelForValue(i))}k=t.top,P=t.bottom,_=p+g,w=_+c}else if("y"===i){if("center"===o)p=e((t.left+t.right)/2);else if(j(o)){const C=Object.keys(o)[0],i=o[C];p=e(this.chart.scales[C].getPixelForValue(i))}v=p-g,y=v-c,M=t.left,S=t.right}var t=U(n.ticks.maxTicksLimit,h),D=Math.max(1,Math.ceil(h/t));for(m=0;m<h;m+=D){const C=a.setContext(this.getContext(m)),i=C.lineWidth,n=C.color,o=a.borderDash||[],h=C.borderDashOffset,c=C.tickWidth,u=C.tickColor,f=C.tickBorderDash||[],g=C.tickBorderDashOffset;void 0!==(x=function(t,e,i){var s=t.ticks.length,n=Math.min(e,s-1),a=t._startPixel,o=t._endPixel;let r,l=t.getPixelForTick(n);if(!(i&&(r=1===s?Math.max(l-a,o-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(n-1))/2,l+=n<e?r:-r,l<a-1e-6||l>o+1e-6)))return l}(this,m,r))&&(b=Ut(s,x,i),l?v=y=M=S=b:_=w=k=P=b,d.push({tx1:v,ty1:_,tx2:y,ty2:w,x1:M,y1:k,x2:S,y2:P,width:i,color:n,borderDash:o,borderDashOffset:h,tickWidth:c,tickColor:u,tickBorderDash:f,tickBorderDashOffset:g}))}return this._ticksLength=h,this._borderValue=p,d}_computeLabelItems(s){const n=this.axis,a=this.options,{position:o,ticks:t}=a,e=this.isHorizontal(),r=this.ticks,{align:l,crossAlign:h,padding:c,mirror:d}=t,i=ws(a.grid),u=i+c,f=d?-c:u,g=-Lt(this.labelRotation),p=[];let m,x,b,v,_,y,w,M,k,S,P,D="middle";if("top"===o)_=this.bottom-f,y=this._getXAxisLabelAlignment();else if("bottom"===o)_=this.top+f,y=this._getXAxisLabelAlignment();else if("left"===o){const s=this._getYAxisLabelAlignment(i);y=s.textAlign,v=s.x}else if("right"===o){const s=this._getYAxisLabelAlignment(i);y=s.textAlign,v=s.x}else if("x"===n){if("center"===o)_=(s.top+s.bottom)/2+u;else if(j(o)){const s=Object.keys(o)[0],n=o[s];_=this.chart.scales[s].getPixelForValue(n)+u}y=this._getXAxisLabelAlignment()}else if("y"===n){if("center"===o)v=(s.left+s.right)/2-u;else if(j(o)){const s=Object.keys(o)[0],n=o[s];v=this.chart.scales[s].getPixelForValue(n)}y=this._getYAxisLabelAlignment(i).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));var C=this._getLabelSizes();for(m=0,x=r.length;m<x;++m){b=r[m].label;const s=t.setContext(this.getContext(m));w=this.getPixelForTick(m)+t.labelOffset,k=(M=this._resolveTickFontOptions(m)).lineHeight;const n=(S=H(b)?b.length:1)/2,a=s.color,l=s.textStrokeColor,c=s.textStrokeWidth;let i;if(e?(v=w,P="top"===o?"near"===h||0!=g?-S*k+k/2:"center"===h?-C.highest.height/2-n*k+k:-C.highest.height+k/2:"near"===h||0!=g?k/2:"center"===h?C.highest.height/2-n*k:C.highest.height-S*k,d&&(P*=-1)):(_=w,P=(1-S)*k/2),s.showLabelBackdrop){const n=Ie(s.backdropPadding),a=C.heights[m],o=C.widths[m];let t=_+P-n.top,e=v-n.left;switch(D){case"middle":t-=a/2;break;case"bottom":t-=a}switch(y){case"center":e-=o/2;break;case"right":e-=o}i={left:e,top:t,width:o+n.width,height:a+n.height,color:s.backdropColor}}p.push({rotation:g,label:b,font:M,color:a,strokeColor:l,strokeWidth:c,textOffset:P,textAlign:y,textBaseline:D,translation:[v,_],backdrop:i})}return p}_getXAxisLabelAlignment(){var{position:t,ticks:e}=this.options;if(-Lt(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align&&(i="right"),i}_getYAxisLabelAlignment(t){var{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,a=t+n,t=this._getLabelSizes().widest.width;let o,r;return"left"===e?s?(r=this.right+n,"near"===i?o="left":"center"===i?(o="center",r+=t/2):(o="right",r+=t)):(r=this.right-a,"near"===i?o="right":"center"===i?(o="center",r-=t/2):(o="left",r=this.left)):"right"===e?s?(r=this.left+n,"near"===i?o="right":"center"===i?(o="center",r-=t/2):(o="left",r-=t)):(r=this.left+a,"near"===i?o="left":"center"===i?(o="center",r+=t/2):(o="right",r=this.right)):o="right",{textAlign:o,x:r}}_computeLabelArea(){if(!this.options.ticks.mirror){var t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:a}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,a),t.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;var i=this.ticks.findIndex(t=>t.value===e);return 0<=i?t.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,s=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,a;var o=(t,e,i)=>{i.width&&i.color&&(s.save(),s.lineWidth=i.width,s.strokeStyle=i.color,s.setLineDash(i.borderDash||[]),s.lineDashOffset=i.borderDashOffset,s.beginPath(),s.moveTo(t.x,t.y),s.lineTo(e.x,e.y),s.stroke(),s.restore())};if(e.display)for(n=0,a=i.length;n<a;++n){const t=i[n];e.drawOnChartArea&&o({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&o({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:n,ctx:a,options:{grid:o}}=this,r=o.setContext(this.getContext()),l=o.drawBorder?r.borderWidth:0;if(l){var h=o.setContext(this.getContext(0)).lineWidth,c=this._borderValue;let t,e,i,s;this.isHorizontal()?(t=Ut(n,this.left,l)-l/2,e=Ut(n,this.right,h)+h/2,i=s=c):(i=Ut(n,this.top,l)-l/2,s=Ut(n,this.bottom,h)+h/2,t=e=c),a.save(),a.lineWidth=r.borderWidth,a.strokeStyle=r.borderColor,a.beginPath(),a.moveTo(t,i),a.lineTo(e,s),a.stroke(),a.restore()}}drawLabels(i){if(this.options.ticks.display){const n=this.ctx,a=this._computeLabelArea();a&&Gt(n,a);var s=this._labelItems||(this._labelItems=this._computeLabelItems(i));let e,t;for(e=0,t=s.length;e<t;++e){const i=s[e],a=i.font,t=i.label;i.backdrop&&(n.fillStyle=i.backdrop.color,n.fillRect(i.backdrop.left,i.backdrop.top,i.backdrop.width,i.backdrop.height)),te(n,t,0,i.textOffset,a,i)}a&&Zt(n)}}drawTitle(){var{ctx:e,options:{position:i,title:s,reverse:n}}=this;if(s.display){var a=ze(s.font),o=Ie(s.padding),r=s.align;let t=a.lineHeight/2;"bottom"===i||"center"===i||j(i)?(t+=o.bottom,H(s.text)&&(t+=a.lineHeight*(s.text.length-1))):t+=o.top;var{titleX:l,titleY:h,maxWidth:c,rotation:o}=function(t,e,i,s){const{top:n,left:a,bottom:o,right:r,chart:l}=t,{chartArea:h,scales:c}=l;let d,u,f,g=0;var p=o-n,m=r-a;if(t.isHorizontal()){if(u=P(s,a,r),j(i)){const t=Object.keys(i)[0],s=i[t];f=c[t].getPixelForValue(s)+p-e}else f="center"===i?(h.bottom+h.top)/2+p-e:_s(t,i,e);d=r-a}else{if(j(i)){const t=Object.keys(i)[0],s=i[t];u=c[t].getPixelForValue(s)-m+e}else u="center"===i?(h.left+h.right)/2-m+e:_s(t,i,e);f=P(s,o,n),g="left"===i?-yt:yt}return{titleX:u,titleY:f,maxWidth:d,rotation:g}}(this,t,i,r);te(e,s.text,0,0,a,{color:s.color,maxWidth:c,rotation:o,textAlign:function(t,e,i){let s=f(t);return(i&&"right"!==e||!i&&"right"===e)&&(s="left"===(e=s)?"right":"right"===e?"left":e),s}(r,i,n),textBaseline:"middle",translation:[l,h]})}}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){var t=this.options,e=t.ticks&&t.ticks.z||0,t=U(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===ks.prototype.draw?[{z:t,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:t+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,a;for(n=0,a=e.length;n<a;++n){const a=e[n];a[i]!==this.id||t&&a.type!==t||s.push(a)}return s}_resolveTickFontOptions(t){return ze(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){var t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Ss{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){var e,i,r,l,s=Object.getPrototypeOf(t);let n;"id"in(i=s)&&"defaults"in i&&(n=this.register(s));const a=this.items,o=t.id,h=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in a||(a[o]=t,e=t,i=h,s=n,s=et(Object.create(null),[s?pt.get(s):{},pt.get(i),e.defaults]),pt.set(i,s),e.defaultRoutes&&(r=i,l=e.defaultRoutes,Object.keys(l).forEach(t=>{const e=t.split("."),i=e.pop(),s=[r].concat(e).join("."),n=l[t].split("."),a=n.pop(),o=n.join(".");pt.route(s,i,o,a)})),e.descriptors&&pt.describe(i,e.descriptors),this.override&&pt.override(t.id,t.overrides)),h}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,s=this.scope;i in e&&delete e[i],s&&i in pt[s]&&(delete pt[s][i],this.override&&delete dt[i])}}var Ps=new class{constructor(){this.controllers=new Ss(gs,"datasets",!0),this.elements=new Ss(ps,"elements"),this.plugins=new Ss(Object,"plugins"),this.scales=new Ss(ks,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(i,t,s){[...t].forEach(t=>{const e=s||this._getRegistryForType(t);s||e.isForType(t)||e===this.plugins&&t.id?this._exec(i,e,t):G(t,t=>{var e=s||this._getRegistryForType(t);this._exec(i,e,t)})})}_exec(t,e,i){var s=ot(t);K(i["before"+s],[],i),e[t](i),K(i["after"+s],[],i)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const i=this._typedRegistries[t];if(i.isForType(e))return i}return this.plugins}_get(t,e,i){e=e.get(t);if(void 0===e)throw new Error('"'+t+'" is not a registered '+i+".");return e}};class Ds{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));s=s?this._descriptors(t).filter(s):this._descriptors(t),i=this._notify(s,t,e,i);return"afterDestroy"===e&&(this._notify(s,t,"stop"),this._notify(this._init,t,"uninstall")),i}_notify(t,e,i,s){s=s||{};for(const n of t){const t=n.plugin;if(!1===K(t[i],[e,s,n.options],t)&&s.cancelable)return!1}return!0}invalidate(){N(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;var e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){var i=t&&t.config,s=U(i.options&&i.options.plugins,{}),i=function(t){const e=[],i=Object.keys(Ps.plugins.items);for(let t=0;t<i.length;t++)e.push(Ps.getPlugin(i[t]));var s=t.plugins||[];for(let t=0;t<s.length;t++){const i=s[t];-1===e.indexOf(i)&&e.push(i)}return e}(i);return!1!==s||e?function(e,i,s,n){const a=[],o=e.getContext();for(let t=0;t<i.length;t++){var r=i[t],l=(l=s[r.id],n||!1!==l?!0===l?{}:l:null);null!==l&&a.push({plugin:r,options:function(t,e,i,s){e=t.pluginScopeKeys(e),e=t.getOptionScopes(i,e);return t.createResolver(e,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}(e.config,r,l,o)})}var l;return a}(t,i,s,e):[]}_notifyStateChanges(t){var e=this._oldCache||[],i=this._cache,s=(t,i)=>t.filter(e=>!i.some(t=>e.plugin.id===t.plugin.id));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Cs(t,e){var i=pt.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Os(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(e=e.position)||"bottom"===e?"x":"left"===e||"right"===e?"y":void 0)||t.charAt(0).toLowerCase()}function As(t){const e=t.options||(t.options={});e.plugins=U(e.plugins,{}),e.scales=function(e,i){const a=dt[e.type]||{scales:{}},o=i.scales||{},r=Cs(e.type,i),l=Object.create(null),h=Object.create(null);return Object.keys(o).forEach(t=>{var e=o[t];if(!j(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const i=Os(t,e),s=i===r?"_index_":"_value_",n=a.scales||{};l[i]=l[i]||t,h[t]=it(Object.create(null),[{axis:i},e,n[i],n[s]])}),e.data.datasets.forEach(s=>{const t=s.type||e.type,n=s.indexAxis||Cs(t,i),a=(dt[t]||{}).scales||{};Object.keys(a).forEach(t=>{var e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,n),i=s[e+"AxisID"]||l[e]||e;h[i]=h[i]||Object.create(null),it(h[i],[{axis:e},o[i],a[t]])})}),Object.keys(h).forEach(t=>{t=h[t];it(t,[pt.scales[t.type],pt.scale])}),h}(t,e)}function Ts(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Ls=new Map,Rs=new Set;function Es(t,e){let i=Ls.get(t);return i||(i=e(),Ls.set(t,i),Rs.add(i)),i}const Is=(t,e,i)=>{i=at(e,i);void 0!==i&&t.add(i)};class zs{constructor(t){this._config=((t=(t=t)||{}).data=Ts(t.data),As(t),t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Ts(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){var t=this._config;this.clearCache(),As(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Es(t,()=>[[`datasets.${t}`,""]])}datasetAnimationScopeKeys(t,e){return Es(`${t}.transition.${e}`,()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]])}datasetElementScopeKeys(t,e){return Es(`${t}-${e}`,()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]])}pluginScopeKeys(t){const e=t.id;return Es(`${this.type}-plugin-${e}`,()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]])}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(e,t,i){const{options:s,type:n}=this,a=this._cachedScopes(e,i),o=a.get(t);if(o)return o;const r=new Set;t.forEach(t=>{e&&(r.add(e),t.forEach(t=>Is(r,e,t))),t.forEach(t=>Is(r,s,t)),t.forEach(t=>Is(r,dt[n]||{},t)),t.forEach(t=>Is(r,pt,t)),t.forEach(t=>Is(r,ut,t))});const l=Array.from(r);return 0===l.length&&l.push(Object.create(null)),Rs.has(t)&&a.set(t,l),l}chartOptionScopes(){var{options:t,type:e}=this;return[t,dt[e]||{},pt.datasets[e]||{},{type:e},pt,ut]}resolveNamedOptions(t,e,i,s=[""]){const n={$shared:!0},{resolver:a,subPrefixes:o}=Fs(this._resolverCache,t,s);let r=a;!function(t,e){const{isScriptable:i,isIndexable:s}=Qe(t);for(const n of e){const e=i(n),a=s(n),o=(a||e)&&t[n];if(e&&(lt(o)||Bs(o))||a&&H(o))return 1}}(a,e)||(n.$shared=!1,r=Je(a,i=lt(i)?i():i,this.createResolver(t,i,o)));for(const t of e)n[t]=r[t];return n}createResolver(t,e,i=[""],s){var i=Fs(this._resolverCache,t,i)["resolver"];return j(e)?Je(i,e,void 0,s):i}}function Fs(t,e,i){let s=t.get(e);s||(s=new Map,t.set(e,s));t=i.join();let n=s.get(t);return n||(n={resolver:Ze(e,i),subPrefixes:i.filter(t=>!t.toLowerCase().includes("hover"))},s.set(t,n)),n}const Bs=i=>j(i)&&Object.getOwnPropertyNames(i).reduce((t,e)=>t||lt(i[e]),!1),Vs=["top","bottom","left","right","chartArea"];function Ws(t,e){return"top"===t||"bottom"===t||-1===Vs.indexOf(t)&&"x"===e}function Ns(i,s){return function(t,e){return t[i]===e[i]?t[s]-e[s]:t[i]-e[i]}}function Hs(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),K(i&&i.onComplete,[t],e)}function js(t){var e=t.chart,i=e.options.animation;K(i&&i.onProgress,[t],e)}function $s(t){return ce()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t=t&&t.canvas?t.canvas:t}const Ys={},Us=t=>{const e=$s(t);return Object.values(Ys).filter(t=>t.canvas===e).pop()};class Xs{constructor(t,e){const i=this.config=new zs(e),s=$s(t),n=Us(s);if(n)throw new Error("Canvas is already in use. Chart with ID '"+n.id+"' must be destroyed before the canvas can be reused.");var a=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||Zi(s)),this.platform.updateConfig(i);var o=this.platform.acquireContext(s,a.aspectRatio),r=o&&o.canvas,e=r&&r.height,t=r&&r.width;this.id=W(),this.ctx=o,this.canvas=r,this.width=t,this.height=e,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ds,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=h(t=>this.update(t),a.resizeDelay||0),this._dataChanges=[],Ys[this.id]=this,o&&r?(c.listen(this,"complete",Hs),c.listen(this,"progress",js),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){var{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:s,_aspectRatio:n}=this;return N(t)?e&&n?n:s?i/s:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():_e(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Xt(this.canvas,this.ctx),this}stop(){return c.stop(this),this}resize(t,e){c.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){var i=this.options,s=this.canvas,n=i.maintainAspectRatio&&this.aspectRatio,t=this.platform.getMaximumSize(s,t,e,n),e=i.devicePixelRatio||this.platform.getDevicePixelRatio(),n=this.width?"resize":"attach";this.width=t.width,this.height=t.height,this._aspectRatio=this.aspectRatio,_e(this,e,!0)&&(this.notifyPlugins("resize",{size:t}),K(i.onResize,[this,t],this),this.attached&&this._doResize(n)&&this.render())}ensureScalesHaveIDs(){G(this.options.scales||{},(t,e)=>{t.id=e})}buildOrUpdateScales(){const o=this.options,s=o.scales,r=this.scales,l=Object.keys(r).reduce((t,e)=>(t[e]=!1,t),{});let t=[];s&&(t=t.concat(Object.keys(s).map(t=>{var e=s[t],i=Os(t,e),t="r"===i,i="x"===i;return{options:e,dposition:t?"chartArea":i?"bottom":"left",dtype:t?"radialLinear":i?"category":"linear"}}))),G(t,t=>{const e=t.options,i=e.id,s=Os(i,e),n=U(e.type,t.dtype);void 0!==e.position&&Ws(e.position,s)===Ws(t.dposition)||(e.position=t.dposition),l[i]=!0;let a=null;i in r&&r[i].type===n?a=r[i]:(a=new(Ps.getScale(n))({id:i,type:n,ctx:this.ctx,chart:this}),r[a.id]=a),a.init(e,o)}),G(l,(t,e)=>{t||delete r[e]}),G(r,t=>{Ge.configure(this,t,t.options),Ge.addBox(this,t)})}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort((t,e)=>t.index-e.index),e<i){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(Ns("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:i}}=this;t.length>i.length&&delete this._stacks,t.forEach((e,t)=>{0===i.filter(t=>t===e._dataset).length&&this._destroyDatasetMeta(t)})}buildOrUpdateControllers(){const e=[],i=this.data.datasets;let s,n;for(this._removeUnreferencedMetasets(),s=0,n=i.length;s<n;s++){const n=i[s];let t=this.getDatasetMeta(s);var a=n.type||this.config.type;if(t.type&&t.type!==a&&(this._destroyDatasetMeta(s),t=this.getDatasetMeta(s)),t.type=a,t.indexAxis=n.indexAxis||Cs(a,this.options),t.order=n.order||0,t.index=s,t.label=""+n.label,t.visible=this.isDatasetVisible(s),t.controller)t.controller.updateIndex(s),t.controller.linkScales();else{const i=Ps.getController(a),{datasetElementType:n,dataElementType:o}=pt.datasets[a];Object.assign(i.prototype,{dataElementType:Ps.getElement(o),datasetElementType:n&&Ps.getElement(n)}),t.controller=new i(this,s),e.push(t.controller)}}return this._updateMetasets(),e}_resetElements(){G(this.data.datasets,(t,e)=>{this.getDatasetMeta(e).controller.reset()},this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const s=this.config;s.update();const n=this._options=s.createResolver(s.chartOptionScopes(),this.getContext()),a=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1!==this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0})){const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let i=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const s=this.getDatasetMeta(t)["controller"],n=!a&&-1===o.indexOf(s);s.buildOrUpdateElements(n),i=Math.max(+s.getMaxOverflow(),i)}i=this._minPadding=n.layout.autoPadding?i:0,this._updateLayout(i),a||G(o,t=>{t.reset()}),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Ns("z","_idx"));var{_active:e,_lastEvent:t}=this;t?this._eventHandler(t,!0):e.length&&this._updateHoverStyles(e,e,!0),this.render()}}_updateScales(){G(this.scales,t=>{Ge.removeBox(this,t)}),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){var t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);ht(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){var t,e,i,s=this["_hiddenIndices"];for({method:t,start:e,count:i}of this._getUniformDataChanges()||[])!function(t,e,i){const s=Object.keys(t);for(const a of s){const s=+a;var n;s>=e&&(n=t[a],delete t[a],(0<i||s>e)&&(t[s+i]=n))}}(s,e,"_removeElements"===t?-i:i)}_getUniformDataChanges(){const t=this._dataChanges;if(t&&t.length){this._dataChanges=[];var e=this.data.datasets.length,i=e=>new Set(t.filter(t=>t[0]===e).map((t,e)=>e+","+t.splice(1).join(","))),s=i(0);for(let t=1;t<e;t++)if(!ht(s,i(t)))return;return Array.from(s).map(t=>t.split(",")).map(t=>({method:t[1],start:+t[2],count:+t[3]}))}}_updateLayout(t){if(!1!==this.notifyPlugins("beforeLayout",{cancelable:!0})){Ge.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],G(this.boxes,t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))},this),this._layers.forEach((t,e)=>{t._idx=e}),this.notifyPlugins("afterLayout")}}_updateDatasets(i){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:i,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let t=0,e=this.data.datasets.length;t<e;++t)this._updateDataset(t,lt(i)?i({datasetIndex:t}):i);this.notifyPlugins("afterDatasetsUpdate",{mode:i})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(c.has(this)?this.attached&&!c.running(this)&&c.start(this):(this.draw(),Hs({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),!(this.width<=0||this.height<=0)&&!1!==this.notifyPlugins("beforeDraw",{cancelable:!0})){const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1!==this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0})){var e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;0<=t;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}}_drawDataset(t){const e=this.ctx,i=t._clip,s=!i.disabled,n=this.chartArea,a={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",a)&&(s&&Gt(e,{left:!1===i.left?0:n.left-i.left,right:!1===i.right?this.width:n.right+i.right,top:!1===i.top?0:n.top-i.top,bottom:!1===i.bottom?this.height:n.bottom+i.bottom}),t.controller.draw(),s&&Zt(e),a.cancelable=!1,this.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(t,e,i,s){const n=Ce.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter(t=>t&&t._dataset===e).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=Ve(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){var e=this.data.datasets[t];if(!e)return!1;t=this.getDatasetMeta(t);return"boolean"==typeof t.hidden?!t.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(e,t,i){const s=i?"show":"hide",n=this.getDatasetMeta(e),a=n.controller._resolveAnimations(void 0,s);rt(t)?(n.data[t].hidden=!i,this.update()):(this.setDatasetVisibility(e,i),a.update(n,{visible:i}),this.update(t=>t.datasetIndex===e?s:void 0))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),c.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");var{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Xt(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete Ys[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const i=this._listeners,s=this.platform,e=(t,e)=>{s.addEventListener(this,t,e),i[t]=e},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};G(this.options.events,t=>e(t,n))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const i=this._responsiveListeners,s=this.platform,t=(t,e)=>{s.addEventListener(this,t,e),i[t]=e},e=(t,e)=>{i[t]&&(s.removeEventListener(this,t,e),delete i[t])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let a;const o=()=>{e("attach",o),this.attached=!0,this.resize(),t("resize",n),t("detach",a)};a=()=>{this.attached=!1,e("resize",n),this._stop(),this._resize(0,0),t("attach",o)},(s.isAttached(this.canvas)?o:a)()}unbindEvents(){G(this._listeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._listeners={},G(this._responsiveListeners,(t,e)=>{this.platform.removeEventListener(this,e,t)}),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){var s=i?"set":"remove";let n,a,o,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),o=0,r=t.length;o<r;++o){const e=(a=t[o])&&this.getDatasetMeta(a.datasetIndex).controller;e&&e[s+"HoverStyle"](a.element,a.datasetIndex,a.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){var e=this._active||[],t=t.map(({datasetIndex:t,index:e})=>{var i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}});Z(t,e)||(this._active=t,this._lastEvent=null,this._updateHoverStyles(t,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}_updateHoverStyles(t,e,i){var s=this.options.hover,n=(t,i)=>t.filter(e=>!i.some(t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)),a=n(e,t),e=i?t:n(t,e);a.length&&this.updateHoverStyle(a,s.mode,!1),e.length&&s.mode&&this.updateHoverStyle(e,s.mode,!0)}_eventHandler(e,t){const i={event:e,replay:t,cancelable:!0,inChartArea:Kt(e,this.chartArea,this._minPadding)},s=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1!==this.notifyPlugins("beforeEvent",i,s)){t=this._handleEvent(e,t,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(t||i.changed)&&this.render(),this}}_handleEvent(t,e,i){const{_active:s=[],options:n}=this,a=e,o=this._getActiveElements(t,s,i,a),r=ct(t),l=(h=t,c=this._lastEvent,i&&"mouseout"!==h.type?r?c:h:null);var h,c;i&&(this._lastEvent=null,K(n.onHover,[t,o,this],this),r&&K(n.onClick,[t,o,this],this));t=!Z(o,s);return(t||e)&&(this._active=o,this._updateHoverStyles(o,s,e)),this._lastEvent=l,t}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;e=this.options.hover;return this.getElementsAtEventForMode(t,e.mode,e,s)}}const qs=()=>G(Xs.instances,t=>t._plugins.invalidate());function Ks(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}Object.defineProperties(Xs,{defaults:{enumerable:!0,value:pt},instances:{enumerable:!0,value:Ys},overrides:{enumerable:!0,value:dt},registry:{enumerable:!0,value:Ps},version:{enumerable:!0,value:"3.7.0"},getChart:{enumerable:!0,value:Us},register:{enumerable:!0,value:(...t)=>{Ps.add(...t),qs()}},unregister:{enumerable:!0,value:(...t)=>{Ps.remove(...t),qs()}}});class Gs{constructor(t){this.options=t||{}}formats(){return Ks()}parse(t,e){return Ks()}format(t,e){return Ks()}add(t,e,i){return Ks()}diff(t,e,i){return Ks()}startOf(t,e,i){return Ks()}endOf(t,e){return Ks()}}Gs.override=function(t){Object.assign(Gs.prototype,t)};var Zs={_date:Gs};function Js(t,e,i,s){return H(t)?function(t,e,i,s){var n=i.parse(t[0],s),a=i.parse(t[1],s),t=Math.min(n,a),s=Math.max(n,a);let o=t,r=s;Math.abs(t)>Math.abs(s)&&(o=s,r=t),e[i.axis]=r,e._custom={barStart:o,barEnd:r,start:n,end:a,min:t,max:s}}(t,e,i,s):e[i.axis]=i.parse(t,s),e}function Qs(t,e,i,s){const n=t.iScale,a=t.vScale,o=n.getLabels(),r=n===a,l=[];let h,c,d,u;for(c=(h=i)+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(o[h],h),l.push(Js(u,d,a,h));return l}function tn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function en(t,e,i,s){return t=s?sn(t=t===e?i:t===i?e:t,i,e):sn(t,e,i)}function sn(t,e,i){return"start"===t?e:"end"===t?i:t}class nn extends gs{parsePrimitiveData(t,e,i,s){return Qs(t,e,i,s)}parseArrayData(t,e,i,s){return Qs(t,e,i,s)}parseObjectData(t,e,i,s){const{iScale:n,vScale:a}=t,{xAxisKey:o="x",yAxisKey:r="y"}=this._parsing,l="x"===n.axis?o:r,h="x"===a.axis?o:r,c=[];let d,u,f,g;for(u=(d=i)+s;d<u;++d)g=e[d],f={},f[n.axis]=n.parse(at(g,l),d),c.push(Js(at(g,h),f,a,d));return c}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);i=i._custom;i&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,i.min),t.max=Math.max(t.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),a=n._custom,o=tn(a)?"["+a.start+", "+a.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:o}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){var e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(e,i,s,n){const a="reset"===n,{index:o,_cachedMeta:{vScale:r}}=this,l=r.getBasePixel(),h=r.isHorizontal(),c=this._getRuler(),t=this.resolveDataElementOptions(i,n),d=this.getSharedOptions(t),u=this.includeOptions(n,d);this.updateSharedOptions(d,n,t);for(let t=i;t<i+s;t++){const i=this.getParsed(t),s=a||N(i[r.axis])?{base:l,head:l}:this._calculateBarValuePixels(t),m=this._calculateBarIndexPixels(t,c),x=(i._stacks||{})[r.axis],b={horizontal:h,base:s.base,enableBorderRadius:!x||tn(i._custom)||o===x._top||o===x._bottom,x:h?s.head:m.center,y:h?m.center:s.head,height:h?m.size:Math.abs(s.size),width:h?Math.abs(s.size):m.size};u&&(b.options=d||this.resolveDataElementOptions(t,e[t].active?"active":n));var f=b.options||e[t].options;(function(a,t,e,i){let s=t.borderSkipped;const n={};if(!s)return a.borderSkipped=n;var{start:o,end:r,reverse:l,top:h,bottom:t}=function(){let t,e,i,s,n;return i=a.horizontal?(t=a.base>a.x,e="left","right"):(t=a.base<a.y,e="bottom","top"),n=t?(s="end","start"):(s="start","end"),{start:e,end:i,reverse:t,top:s,bottom:n}}();"middle"===s&&e&&(a.enableBorderRadius=!0,s=(e._top||0)===i?h:(e._bottom||0)===i?t:(n[en(t,o,r,l)]=!0,h)),n[en(s,o,r,l)]=!0,a.borderSkipped=n})(b,f,x,o),[g,p,f]=[b,f["inflateAmount"],c.ratio],g.inflateAmount="auto"===p?1===f?.33:0:p,this.updateElement(e[t],t,b,n)}var g,p}_getStacks(t,e){const i=this._cachedMeta.iScale,s=i.getMatchingVisibleMetas(this._type),n=i.options.stacked,a=s.length,o=[];let r,l;for(r=0;r<a;++r)if(l=s[r],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(N(t)||isNaN(t))continue}if((!1===n||-1===o.indexOf(l.stack)||void 0===n&&void 0===l.stack)&&o.push(l.stack),l.index===t)break}return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,a;for(n=0,a=e.data.length;n<a;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));var o=t.barThickness;return{min:o||function(t){const e=t.iScale,i=function(s,t){if(!s._cache.$bar){const n=s.getMatchingVisibleMetas(t);let i=[];for(let t=0,e=n.length;t<e;t++)i=i.concat(n[t].controller.getAllParsedValues(s));s._cache.$bar=he(i.sort((t,e)=>t-e))}return s._cache.$bar}(e,t.type);let s,n,a,o,r=e._length;var l=()=>{32767!==a&&-32768!==a&&(rt(o)&&(r=Math.min(r,Math.abs(a-o)||r)),o=a)};for(s=0,n=i.length;s<n;++s)a=e.getPixelForValue(i[s]),l();for(o=void 0,s=0,n=e.ticks.length;s<n;++s)a=e.getPixelForTick(s),l();return r}(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:o?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i},options:{base:s,minBarLength:n}}=this,a=s||0,o=this.getParsed(t),r=o._custom,l=tn(r);let h,c,d=o[e.axis],u=0,f=i?this.applyStack(e,o,i):d;f!==d&&(u=f-d,f=d),l&&(d=r.barStart,f=r.barEnd-r.barStart,0!==d&&St(d)!==St(r.barEnd)&&(u=0),u+=d);var g,p=N(s)||l?u:s;let m=e.getPixelForValue(p);if(h=this.chart.getDataVisibility(t)?e.getPixelForValue(u+f):m,c=h-m,Math.abs(c)<n&&(c=(g=c,p=e,t=a,(0!==g?St(g):(p.isHorizontal()?1:-1)*(p.min>=t?1:-1))*n),d===a&&(m-=c/2),h=m+c),m===e.getPixelForValue(a)){const x=St(c)*e.getLineWidthForValue(a)/2;m+=x,c-=x}return{size:c,base:m,head:h,center:h+c/2}}_calculateBarIndexPixels(t,e){const i=e.scale,s=this.options,n=s.skipNull,a=U(s.maxBarThickness,1/0);let o,r;if(e.grouped){const i=n?this._getStackCount(t):e.stackCount,l=("flex"===s.barThickness?function(t,e,i,s){var n=e.pixels,a=n[t];let o=0<t?n[t-1]:null,r=t<n.length-1?n[t+1]:null;t=i.categoryPercentage;null===o&&(o=a-(null===r?e.end-e.start:r-a)),null===r&&(r=a+a-o);a-=(a-Math.min(o,r))/2*t;return{chunk:Math.abs(r-o)/2*t/s,ratio:i.barPercentage,start:a}}:function(t,e,i,s){var n=i.barThickness;let a,o;return o=N(n)?(a=e.min*i.categoryPercentage,i.barPercentage):(a=n*s,1),{chunk:a/s,ratio:o,start:e.pixels[t]-a/2}})(t,e,s,i),h=this._getStackIndex(this.index,this._cachedMeta.stack,n?t:void 0);o=l.start+l.chunk*h+l.chunk/2,r=Math.min(a,l.chunk*l.ratio)}else o=i.getPixelForValue(this.getParsed(t)[i.axis],t),r=Math.min(a,e.min*e.ratio);return{base:o-r/2,head:o+r/2,center:o,size:r}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}nn.id="bar",nn.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},nn.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class an extends gs{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,s){const n=super.parseArrayData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=U(s[2],this.resolveDataElementOptions(t+i).radius)}return n}parseObjectData(t,e,i,s){const n=super.parseObjectData(t,e,i,s);for(let t=0;t<n.length;t++){const s=e[i+t];n[t]._custom=U(s&&s.r&&+s.r,this.resolveDataElementOptions(t+i).radius)}return n}getMaxOverflow(){const e=this._cachedMeta.data;let i=0;for(let t=e.length-1;0<=t;--t)i=Math.max(i,e[t].size(this.resolveDataElementOptions(t))/2);return 0<i&&i}getLabelAndValue(t){const e=this._cachedMeta,{xScale:i,yScale:s}=e,n=this.getParsed(t),a=i.getLabelForValue(n.x),o=s.getLabelForValue(n.y),r=n._custom;return{label:e.label,value:"("+a+", "+o+(r?", "+r:"")+")"}}update(t){var e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(e,i,s,n){const a="reset"===n,{iScale:o,vScale:r}=this._cachedMeta,t=this.resolveDataElementOptions(i,n),l=this.getSharedOptions(t),h=this.includeOptions(n,l),c=o.axis,d=r.axis;for(let t=i;t<i+s;t++){const i=e[t],s=!a&&this.getParsed(t),l={},u=l[c]=a?o.getPixelForDecimal(.5):o.getPixelForValue(s[c]),f=l[d]=a?r.getBasePixel():r.getPixelForValue(s[d]);l.skip=isNaN(u)||isNaN(f),h&&(l.options=this.resolveDataElementOptions(t,i.active?"active":n),a&&(l.options.radius=0)),this.updateElement(i,t,l,n)}this.updateSharedOptions(l,n,t)}resolveDataElementOptions(t,e){var i=this.getParsed(t);let s=super.resolveDataElementOptions(t,e);s.$shared&&(s=Object.assign({},s,{$shared:!1}));t=s.radius;return"active"!==e&&(s.radius=0),s.radius+=U(i&&i._custom,t),s}}an.id="bubble",an.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},an.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class on extends gs{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(s,n){const a=this.getDataset().data,o=this._cachedMeta;if(!1===this._parsing)o._parsed=a;else{let t,e,i=t=>+a[t];if(j(a[s])){const{key:s="value"}=this._parsing;i=t=>+at(a[t],s)}for(e=(t=s)+n;t<e;++t)o._parsed[t]=i(t)}}_getRotation(){return Lt(this.options.rotation-90)}_getCircumference(){return Lt(this.options.circumference)}_getRotationExtents(){let e=xt,i=-xt;for(let t=0;t<this.chart.data.datasets.length;++t)if(this.chart.isDatasetVisible(t)){const s=this.chart.getDatasetMeta(t).controller,n=s._getRotation(),a=s._getCircumference();e=Math.min(e,n),i=Math.max(i,n+a)}return{rotation:e,circumference:i-e}}update(t){const e=this.chart,i=e["chartArea"],s=this._cachedMeta,n=s.data,a=this.getMaxBorderWidth()+this.getMaxOffset(n)+this.options.spacing,o=Math.max((Math.min(i.width,i.height)-a)/2,0),r=Math.min(X(this.options.cutout,o),1),l=this._getRingWeight(this.index),{circumference:h,rotation:c}=this._getRotationExtents(),{ratioX:d,ratioY:u,offsetX:f,offsetY:g}=function(t,e,s){let i=1,n=1,a=0,o=0;if(e<xt){const r=t,l=r+e,h=Math.cos(r),c=Math.sin(r),d=Math.cos(l),u=Math.sin(l),f=(t,e,i)=>Vt(t,r,l,!0)?1:Math.max(e,e*s,i,i*s),g=(t,e,i)=>Vt(t,r,l,!0)?-1:Math.min(e,e*s,i,i*s),p=f(0,h,d),m=f(yt,c,u),x=g(mt,h,d),b=g(mt+yt,c,u);i=(p-x)/2,n=(m-b)/2,a=-(p+x)/2,o=-(m+b)/2}return{ratioX:i,ratioY:n,offsetX:a,offsetY:o}}(c,h,r),p=(i.width-a)/d,m=(i.height-a)/u,x=Math.max(Math.min(p,m)/2,0),b=q(this.options.radius,x),v=(b-Math.max(b*r,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*b,this.offsetY=g*b,s.total=this.calculateTotal(),this.outerRadius=b-v*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-v*l,0),this.updateElements(n,0,n.length,t)}_circumference(t,e){var i=this.options,s=this._cachedMeta,n=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===s._parsed[t]||s.data[t].hidden?0:this.calculateCircumference(s._parsed[t]*n/xt)}updateElements(t,e,i,s){const n="reset"===s,a=this.chart,o=a.chartArea,r=a.options.animation,l=(o.left+o.right)/2,h=(o.top+o.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,f=this.resolveDataElementOptions(e,s),g=this.getSharedOptions(f),p=this.includeOptions(s,g);let m,x=this._getRotation();for(m=0;m<e;++m)x+=this._circumference(m,n);for(m=e;m<e+i;++m){const e=this._circumference(m,n),i=t[m],a={x:l+this.offsetX,y:h+this.offsetY,startAngle:x,endAngle:x+e,circumference:e,outerRadius:u,innerRadius:d};p&&(a.options=g||this.resolveDataElementOptions(m,i.active?"active":s)),x+=e,this.updateElement(i,m,a,s)}this.updateSharedOptions(g,s,f)}calculateTotal(){var t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){var n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){var e=this._cachedMeta.total;return 0<e&&!isNaN(t)?xt*(Math.abs(t)/e):0}getLabelAndValue(t){var e=this._cachedMeta,i=this.chart,s=i.data.labels||[],i=ki(e._parsed[t],i.options.locale);return{label:s[t]||"",value:i}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,a,o,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){t=(a=i.getDatasetMeta(s)).data,o=a.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)"inner"!==(r=o.resolveDataElementOptions(s)).borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(i){let s=0;for(let t=0,e=i.length;t<e;++t){const i=this.resolveDataElementOptions(t);s=Math.max(s,i.offset||0,i.hoverOffset||0)}return s}_getRingWeightOffset(e){let i=0;for(let t=0;t<e;++t)this.chart.isDatasetVisible(t)&&(i+=this._getRingWeight(t));return i}_getRingWeight(t){return Math.max(U(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}on.id="doughnut",on.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},on.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},on.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(s){const t=s.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=s.legend.options;return t.labels.map((t,e)=>{var i=s.getDatasetMeta(0).controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!s.getDataVisibility(e),index:e}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;t=": "+t.formattedValue;return H(e)?(e=e.slice(),e[0]+=t):e+=t,e}}}}};class rn extends gs{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:s=[],_dataset:n}=e,a=this.chart._animationsDisabled;let{start:o,count:r}=function(t,e,i){var s=e.length;let n=0,a=s;if(t._sorted){const{iScale:o,_parsed:r}=t,l=o.axis,{min:h,max:c,minDefined:d,maxDefined:u}=o.getUserBounds();d&&(n=Wt(Math.min(se(r,o.axis,h).lo,i?s:se(e,l,o.getPixelForValue(h)).lo),0,s-1)),a=u?Wt(Math.max(se(r,o.axis,c).hi+1,i?0:se(e,l,o.getPixelForValue(c)).hi+1),n,s)-n:s-n}return{start:n,count:a}}(e,s,a);this._drawStart=o,this._drawCount=r,function(t){var{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,1;i=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),i}(e)&&(o=0,r=s.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!n._decimated,i.points=s;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(i,void 0,{animated:!a,options:l},t),this.updateElements(s,o,r,t)}updateElements(e,i,s,n){const a="reset"===n,{iScale:o,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,t=this.resolveDataElementOptions(i,n),c=this.getSharedOptions(t),d=this.includeOptions(n,c),u=o.axis,f=r.axis,{spanGaps:g,segment:p}=this.options,m=Ct(g)?g:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||a||"none"===n;let b=0<i&&this.getParsed(i-1);for(let t=i;t<i+s;++t){const i=e[t],s=this.getParsed(t),g=x?i:{},v=N(s[f]),_=g[u]=o.getPixelForValue(s[u],t),y=g[f]=a||v?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,s,l):s[f],t);g.skip=isNaN(_)||isNaN(y)||v,g.stop=0<t&&s[u]-b[u]>m,p&&(g.parsed=s,g.raw=h.data[t]),d&&(g.options=c||this.resolveDataElementOptions(t,i.active?"active":n)),x||this.updateElement(i,t,g,n),b=s}this.updateSharedOptions(c,n,t)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;var n=s[0].size(this.resolveDataElementOptions(0)),a=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,a)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}rn.id="line",rn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},rn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ln extends gs{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){var e=this._cachedMeta,i=this.chart,s=i.data.labels||[],i=ki(e._parsed[t].r,i.options.locale);return{label:s[t]||"",value:i}}update(t){var e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),a=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-a*this.index,this.innerRadius=this.outerRadius-a}updateElements(s,n,t,a){const o="reset"===a,r=this.chart,l=this.getDataset(),h=r.options.animation,c=this._cachedMeta.rScale,d=c.xCenter,u=c.yCenter,f=c.getIndexAngle(0)-.5*mt;let g,p=f;var m=360/this.countVisibleElements();for(g=0;g<n;++g)p+=this._computeAngle(g,a,m);for(g=n;g<n+t;g++){const n=s[g];let t=p,e=p+this._computeAngle(g,a,m),i=r.getDataVisibility(g)?c.getDistanceFromCenterForValue(l.data[g]):0;p=e,o&&(h.animateScale&&(i=0),h.animateRotate&&(t=e=f));var x={x:d,y:u,innerRadius:0,outerRadius:i,startAngle:t,endAngle:e,options:this.resolveDataElementOptions(g,n.active?"active":a)};this.updateElement(n,g,x,a)}}countVisibleElements(){const i=this.getDataset(),t=this._cachedMeta;let s=0;return t.data.forEach((t,e)=>{!isNaN(i.data[e])&&this.chart.getDataVisibility(e)&&s++}),s}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?Lt(this.resolveDataElementOptions(t,e).angle||i):0}}ln.id="polarArea",ln.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ln.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(s){const t=s.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=s.legend.options;return t.labels.map((t,e)=>{var i=s.getDatasetMeta(0).controller.getStyle(e);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!s.getDataVisibility(e),index:e}})}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class hn extends on{}hn.id="pie",hn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class cn extends gs{getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);var a={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,a,t)}this.updateElements(s,0,s.length,t)}updateElements(e,i,s,n){const a=this.getDataset(),o=this._cachedMeta.rScale,r="reset"===n;for(let t=i;t<i+s;t++){const i=e[t],s=this.resolveDataElementOptions(t,i.active?"active":n),l=o.getPointPositionForValue(t,a.data[t]),h=r?o.xCenter:l.x,c=r?o.yCenter:l.y,d={x:h,y:c,angle:l.angle,skip:isNaN(h)||isNaN(c),options:s};this.updateElement(i,t,d,n)}}}cn.id="radar",cn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},cn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class dn extends rn{}dn.id="scatter",dn.defaults={showLine:!1,fill:!1},dn.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var un=Object.freeze({__proto__:null,BarController:nn,BubbleController:an,DoughnutController:on,LineController:rn,PolarAreaController:ln,PieController:hn,RadarController:cn,ScatterController:dn});function fn(t,e,i){var{startAngle:s,pixelMargin:n,x:a,y:o,outerRadius:r,innerRadius:l}=e,e=n/r;t.beginPath(),t.arc(a,o,r,s-e,i+e),n<l?t.arc(a,o,l,i+(e=n/l),s-e,!0):t.arc(a,o,n,i+yt,s-yt),t.closePath(),t.clip()}function gn(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function pn(t,e,i,s,n){var{x:a,y:o,startAngle:r,pixelMargin:l,innerRadius:h}=e,c=Math.max(e.outerRadius+s+i-l,0),d=0<h?h+s+i+l:0;let u=0;var f=n-r;if(s){const t=((0<h?h-s:0)+(0<c?c-s:0))/2;u=(f-(0!=t?f*t/(t+s):f))/2}var g=(f-Math.max(.001,f*c-i/mt)/c)/2,p=r+g+u,m=n-g-u,{outerStart:x,outerEnd:b,innerStart:v,innerEnd:l}=function(t,e,i,s){t=Le(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]);const n=(i-e)/2,a=Math.min(n,s*e/2),o=t=>{var e=(i-Math.min(n,t))*s/2;return Wt(t,0,Math.min(n,e))};return{outerStart:o(t.outerStart),outerEnd:o(t.outerEnd),innerStart:Wt(t.innerStart,0,a),innerEnd:Wt(t.innerEnd,0,a)}}(e,d,c,m-p),h=c-x,s=c-b,f=p+x/h,i=m-b/s,r=d+v,n=d+l,g=p+v/r,e=m-l/n;if(t.beginPath(),t.arc(a,o,c,f,i),0<b){const _=gn(s,i,a,o);t.arc(_.x,_.y,b,i,m+yt)}i=gn(n,m,a,o);if(t.lineTo(i.x,i.y),0<l){const _=gn(n,e,a,o);t.arc(_.x,_.y,l,m+yt,e+Math.PI)}if(t.arc(a,o,d,m-l/d,p+v/d,!0),0<v){const _=gn(r,g,a,o);t.arc(_.x,_.y,v,g+Math.PI,p-yt)}g=gn(h,p,a,o);if(t.lineTo(g.x,g.y),0<x){const _=gn(h,f,a,o);t.arc(_.x,_.y,x,p-yt,f)}t.closePath()}function mn(t,e,i,s,n){var a=e["options"],{borderWidth:o,borderJoinStyle:r}=a,a="inner"===a.borderAlign;o&&(a?(t.lineWidth=2*o,t.lineJoin=r||"round"):(t.lineWidth=o,t.lineJoin=r||"bevel"),e.fullCircles&&function(t,e,i){var{x:s,y:n,startAngle:a,pixelMargin:o,fullCircles:r}=e,l=Math.max(e.outerRadius-o,0),o=e.innerRadius+o;let h;for(i&&fn(t,e,a+xt),t.beginPath(),t.arc(s,n,o,a+xt,a,!0),h=0;h<r;++h)t.stroke();for(t.beginPath(),t.arc(s,n,l,a,a+xt),h=0;h<r;++h)t.stroke()}(t,e,a),a&&fn(t,e,n),pn(t,e,i,s,n),t.stroke())}class xn extends ps{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){var{angle:s,distance:n}=It(this.getProps(["x","y"],i),{x:t,y:e}),{startAngle:a,endAngle:o,innerRadius:r,outerRadius:t,circumference:e}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),i=this.options.spacing/2,o=U(e,o-a)>=xt||Vt(s,a,o),i=Ht(n,r+i,t+i);return o&&i}getCenterPoint(t){var{x:e,y:i,startAngle:s,endAngle:n,innerRadius:a,outerRadius:o}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:r,spacing:t}=this.options,n=(s+n)/2,r=(a+o+t+r)/2;return{x:e+Math.cos(n)*r,y:i+Math.sin(n)*r}}tooltipPosition(t){return this.getCenterPoint(t)}draw(e){const{options:i,circumference:t}=this,s=(i.offset||0)/2,n=(i.spacing||0)/2;if(this.pixelMargin="inner"===i.borderAlign?.33:0,this.fullCircles=t>xt?Math.floor(t/xt):0,!(0===t||this.innerRadius<0||this.outerRadius<0)){e.save();let t=0;if(s){t=s/2;const i=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(i)*t,Math.sin(i)*t),this.circumference>=mt&&(t=s)}e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor;var a=function(e,t,i,s){var{fullCircles:n,startAngle:a,circumference:o}=t;let r=t.endAngle;if(n){pn(e,t,i,s,a+xt);for(let t=0;t<n;++t)e.fill();isNaN(o)||(r=a+o%xt,o%xt==0&&(r+=xt))}return pn(e,t,i,s,r),e.fill(),r}(e,this,t,n);mn(e,this,t,n,a),e.restore()}}}function bn(t,e,i=e){t.lineCap=U(i.borderCapStyle,e.borderCapStyle),t.setLineDash(U(i.borderDash,e.borderDash)),t.lineDashOffset=U(i.borderDashOffset,e.borderDashOffset),t.lineJoin=U(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=U(i.borderWidth,e.borderWidth),t.strokeStyle=U(i.borderColor,e.borderColor)}function vn(t,e,i){t.lineTo(i.x,i.y)}function _n(t,e,i={}){var s=t.length,{start:n=0,end:a=s-1}=i,{start:o,end:r}=e,t=Math.max(n,o),i=Math.min(a,r);return{count:s,start:t,loop:e.loop,ilen:i<t&&!(n<o&&a<o||r<n&&r<a)?s+i-t:i-t}}function yn(t,e,i,s){const{points:n,options:a}=e,{count:o,start:r,loop:l,ilen:h}=_n(n,i,s),c=a.stepped?Jt:a.tension||"monotone"===a.cubicInterpolationMode?Qt:vn;let d,u,f,{move:g=!0,reverse:p}=s||{};for(d=0;d<=h;++d)u=n[(r+(p?h-d:d))%o],u.skip||(g?(t.moveTo(u.x,u.y),g=!1):c(t,f,u,p,a.stepped),f=u);return l&&(u=n[(r+(p?h:0))%o],c(t,f,u,p,a.stepped)),!!l}function wn(t,e,i,s){const n=e.points,{count:a,start:o,ilen:r}=_n(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,x=0;var b=t=>(o+(h?r-t:t))%a,v=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[b(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c)if(d=n[b(c)],!d.skip){const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(x*m+e)/++x):(v(),t.lineTo(e,i),u=s,x=0,f=g=i),p=i}v()}function Mn(t){var e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?yn:wn}xn.id="arc",xn.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},xn.defaultRoutes={backgroundColor:"backgroundColor"};const kn="function"==typeof Path2D;class Sn extends ps{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){var i,s=this.options;!s.tension&&"monotone"!==s.cubicInterpolationMode||s.stepped||this._pointsUpdated||(i=s.spanGaps?this._loop:this._fullLoop,pi(this._points,s,t,i,e),this._pointsUpdated=!0)}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=Li(this,this.options.segment))}first(){var t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){var t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(i,s){var n=this.options,a=i[s],o=this.points,r=Ti(this,{property:s,start:a,end:a});if(r.length){const l=[],h=n.stepped?yi:n.tension||"monotone"===n.cubicInterpolationMode?wi:_i;let e,t;for(e=0,t=r.length;e<t;++e){const{start:t,end:c}=r[e],d=o[t],u=o[c];if(d!==u){const f=h(d,u,Math.abs((a-d[s])/(u[s]-d[s])),n.stepped);f[s]=i[s],l.push(f)}else l.push(d)}return 1===l.length?l[0]:l}}pathSegment(t,e,i){return Mn(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=Mn(this);let a=this._loop;e=e||0,i=i||this.points.length-e;for(const o of s)a&=n(t,this,o,{start:e,end:e+i-1});return!!a}draw(t,e,i,s){var n,a=this.options||{};(this.points||[]).length&&a.borderWidth&&(t.save(),n=t,a=this,i=i,s=s,(kn&&!a.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),bn(t,e.options),t.stroke(n)}:function(t,e,i,s){const{segments:n,options:a}=e,o=Mn(e);for(const r of n)bn(t,a,r.style),t.beginPath(),o(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()})(n,a,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Pn(t,e,i,s){var n=t.options,{[i]:i}=t.getProps([i],s);return Math.abs(e-i)<n.radius+n.hitRadius}Sn.id="line",Sn.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Sn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Sn.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Dn extends ps{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){var s=this.options,{x:n,y:i}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-i,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Pn(this,t,"x",e)}inYRange(t,e){return Pn(this,t,"y",e)}getCenterPoint(t){var{x:e,y:t}=this.getProps(["x","y"],t);return{x:e,y:t}}size(t){var e=(t=t||this.options||{}).radius||0;return 2*((e=Math.max(e,e&&t.hoverRadius||0))+(e&&t.borderWidth||0))}draw(t,e){var i=this.options;this.skip||i.radius<.1||!Kt(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,qt(t,i,this.x,this.y))}getRange(){var t=this.options||{};return t.radius+t.hitRadius}}function Cn(t,e){var{x:i,y:s,base:n,width:a,height:e}=t.getProps(["x","y","base","width","height"],e);let o,r,l,h,c;return h=t.horizontal?(c=e/2,o=Math.min(i,n),r=Math.max(i,n),l=s-c,s+c):(c=a/2,o=i-c,r=i+c,l=Math.min(s,n),Math.max(s,n)),{left:o,top:l,right:r,bottom:h}}function On(t,e,i,s){return t?0:Wt(e,i,s)}function An(t,e,i,s){var n=null===e,a=null===i,s=t&&!(n&&a)&&Cn(t,s);return s&&(n||Ht(e,s.left,s.right))&&(a||Ht(i,s.top,s.bottom))}function Tn(t,e){t.rect(e.x,e.y,e.w,e.h)}function Ln(t,e,i={}){var s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,a=(t.x+t.w!==i.x+i.w?e:0)-s,e=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+a,h:t.h+e,radius:t.radius}}Dn.id="point",Dn.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Dn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Rn extends ps{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:s}}=this,{inner:n,outer:a}=(u=Cn(r=this),f=u.right-u.left,g=u.bottom-u.top,c=f/2,p=g/2,d=(h=r).options.borderWidth,h=h.borderSkipped,d=Re(d),m={t:On(h.top,d.top,0,p),r:On(h.right,d.right,0,c),b:On(h.bottom,d.bottom,0,p),l:On(h.left,d.left,0,c)},l=f/2,p=g/2,d=(h=r).getProps(["enableBorderRadius"]).enableBorderRadius,c=h.options.borderRadius,r=Ee(c),p=Math.min(l,p),h=h.borderSkipped,p={topLeft:On(!(c=d||j(c))||h.top||h.left,r.topLeft,0,p),topRight:On(!c||h.top||h.right,r.topRight,0,p),bottomLeft:On(!c||h.bottom||h.left,r.bottomLeft,0,p),bottomRight:On(!c||h.bottom||h.right,r.bottomRight,0,p)},{outer:{x:u.left,y:u.top,w:f,h:g,radius:p},inner:{x:u.left+m.l,y:u.top+m.t,w:f-m.l-m.r,h:g-m.t-m.b,radius:{topLeft:Math.max(0,p.topLeft-Math.max(m.t,m.l)),topRight:Math.max(0,p.topRight-Math.max(m.t,m.r)),bottomLeft:Math.max(0,p.bottomLeft-Math.max(m.b,m.l)),bottomRight:Math.max(0,p.bottomRight-Math.max(m.b,m.r))}}}),o=(m=a.radius).topLeft||m.topRight||m.bottomLeft||m.bottomRight?ee:Tn;var r,l,h,c,d,u,f,g,p,m;t.save(),a.w===n.w&&a.h===n.h||(t.beginPath(),o(t,Ln(a,e,n)),t.clip(),o(t,Ln(n,-e,a)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),o(t,Ln(n,e)),t.fillStyle=s,t.fill(),t.restore()}inRange(t,e,i){return An(this,t,e,i)}inXRange(t,e){return An(this,t,null,e)}inYRange(t,e){return An(this,null,t,e)}getCenterPoint(t){var{x:e,y:i,base:s,horizontal:t}=this.getProps(["x","y","base","horizontal"],t);return{x:t?(e+s)/2:e,y:t?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Rn.id="bar",Rn.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Rn.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var En=Object.freeze({__proto__:null,ArcElement:xn,LineElement:Sn,PointElement:Dn,BarElement:Rn});function In(t){var e;t._decimated&&(e=t._data,delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e}))}function zn(t){t.data.datasets.forEach(t=>{In(t)})}var Fn={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(r,t,w)=>{if(w.enabled){const l=r.width;r.data.datasets.forEach((e,t)=>{var{_data:i,indexAxis:s}=e,h=r.getDatasetMeta(t),n=i||e.data;if("y"!==Fe([s,r.options.indexAxis])&&"line"===h.type){s=r.scales[h.xAxisID];if(("linear"===s.type||"time"===s.type)&&!r.options.parsing){var{start:a,count:o}=function(t){var e=t.length;let i,s=0;const n=h["iScale"],{min:a,max:o,minDefined:r,maxDefined:l}=n.getUserBounds();return r&&(s=Wt(se(t,n.axis,a).lo,0,e-1)),i=l?Wt(se(t,n.axis,o).hi+1,s,e)-s:e-s,{start:s,count:i}}(n);if(o<=(w.threshold||4*l))In(e);else{let t;switch(N(i)&&(e._data=n,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),w.algorithm){case"lttb":t=function(s,n,a,t){var e=w.samples||t;if(a<=e)return s.slice(n,n+a);const o=[],r=(a-2)/(e-2);let l=0;const h=n+a-1;let c,d,u,f,g,p=n;for(o[l++]=s[p],c=0;c<e-2;c++){let t,e=0,i=0;const h=Math.floor((c+1)*r)+1+n,_=Math.min(Math.floor((c+2)*r)+1,a)+n,y=_-h;for(t=h;t<_;t++)e+=s[t].x,i+=s[t].y;e/=y,i/=y;var m=Math.floor(c*r)+1+n,x=Math.min(Math.floor((c+1)*r)+1,a)+n,{x:b,y:v}=s[p];for(u=-1,t=m;t<x;t++)(f=.5*Math.abs((b-e)*(s[t].y-v)-(b-s[t].x)*(i-v)))>u&&(u=f,d=s[t],g=t);o[l++]=d,p=g}return o[l++]=s[h],o}(n,a,o,l);break;case"min-max":t=function(t,e,i,s){let n,a,o,r,l,h,c,d,u,f,g=0,p=0;const m=[],x=e+i-1,b=t[e].x,v=t[x].x-b;for(n=e;n<e+i;++n){o=((a=t[n]).x-b)/v*s,r=a.y;const e=0|o;if(e===l)r<u?(u=r,h=n):r>f&&(f=r,c=n),g=(p*g+a.x)/++p;else{const i=n-1;if(!N(h)&&!N(c)){const e=Math.min(h,c),s=Math.max(h,c);e!==d&&e!==i&&m.push({...t[e],x:g}),s!==d&&s!==i&&m.push({...t[s],x:g})}0<n&&i!==d&&m.push(t[i]),m.push(a),l=e,p=0,u=f=r,h=c=d=n}}return m}(n,a,o,l);break;default:throw new Error(`Unsupported decimation algorithm '${w.algorithm}'`)}e._decimated=t}}}})}else zn(r)},destroy(t){zn(t)}};class Bn{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){var{x:s,y:n,radius:a}=this;return e=e||{start:0,end:xt},t.arc(s,n,a,e.end,e.start,!0),!i.bounds}interpolate(t){var{x:e,y:i,radius:s}=this,t=t.angle;return{x:e+Math.cos(t)*s,y:i+Math.sin(t)*s,angle:t}}}function Vn(t,e,i){for(;t<e;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Wn(e,i,s){const n=[];for(let t=0;t<s.length;t++){var{first:a,last:o,point:r}=function(t,e,i){const s=t.interpolate(e,i);if(!s)return{};var n=s[i],a=t.segments,o=t.points;let r=!1,l=!1;for(let t=0;t<a.length;t++){const e=a[t],s=o[e.start][i],h=o[e.end][i];if(Ht(n,s,h)){r=n===s,l=n===h;break}}return{first:r,last:l,point:s}}(s[t],i,"x");if(!(!r||a&&o))if(a)n.unshift(r);else if(e.push(r),!o)break}e.push(...n)}function Nn(r){var t,e,{chart:i,fill:s,line:n}=r;if($(s))return e=s,(i=(t=i).getDatasetMeta(e))&&t.isDatasetVisible(e)?i.dataset:null;if("stack"===s)return function(){const{scale:e,index:t,line:i}=r,s=[],n=i.segments,a=i.points,o=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){var n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,t);o.push(Hn({x:null,y:e.bottom},i));for(let t=0;t<n.length;t++){const e=n[t];for(let t=e.start;t<=e.end;t++)Wn(s,a[t],o)}return new Sn({points:s,options:{}})}();if("shape"===s)return!0;var c,s=(((c=r).scale||{}).getPointPositionForValue?function(){const{scale:t,fill:e}=c,i=t.options,s=t.getLabels().length,n=[],a=i.reverse?t.max:t.min,o=i.reverse?t.min:t.max;let r,l,h;if(h="start"===e?a:"end"===e?o:j(e)?e.value:t.getBaseValue(),i.grid.circular)return l=t.getPointPositionForValue(0,a),new Bn({x:l.x,y:l.y,radius:t.getDistanceFromCenterForValue(h)});for(r=0;r<s;++r)n.push(t.getPointPositionForValue(r,h));return n}:function(){const{scale:t={},fill:e}=c;let i,s=null;return"start"===e?s=t.bottom:"end"===e?s=t.top:j(e)?s=t.getPixelForValue(e.value):t.getBasePixel&&(s=t.getBasePixel()),$(s)?{x:(i=t.isHorizontal())?s:null,y:i?null:s}:null})();return s instanceof Bn?s:Hn(s,n)}function Hn(e,t){let i=[],s=!1;return i=H(e)?(s=!0,e):function(t){const{x:i=null,y:s=null}=e||{},n=t.points,a=[];return t.segments.forEach(({start:t,end:e})=>{e=Vn(t,e,n);t=n[t],e=n[e];null!==s?(a.push({x:t.x,y:s}),a.push({x:e.x,y:s})):null!==i&&(a.push({x:i,y:t.y}),a.push({x:i,y:e.y}))}),a}(t),i.length?new Sn({points:i,options:{tension:0},_loop:s,_fullLoop:s}):null}function jn(t,e,i){t.beginPath(),e.path(t),t.lineTo(e.last().x,i),t.lineTo(e.first().x,i),t.closePath(),t.clip()}function $n(i,s,n,t){if(!t){let t=s[i],e=n[i];return"angle"===i&&(t=Bt(t),e=Bt(e)),{property:i,start:t,end:e}}}function Yn(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function Un(t,e,i,s){s=e.interpolate(i,s);s&&t.lineTo(s.x,s.y)}function Xn(e,i){const{line:s,target:n,property:a,color:o,scale:r}=i,l=function(t,e,i){const s=t.segments,n=t.points,a=e.points,o=[];for(const t of s){var{start:r,end:l}=t,l=Vn(r,l,n),h=$n(i,n[r],n[l],t.loop);if(e.segments){var c=Ti(e,h);for(const e of c){const s=$n(i,a[e.start],a[e.end],e.loop),d=Ai(t,n,s);for(const t of d)o.push({source:t,target:e,start:{[i]:Yn(h,s,"start",Math.max)},end:{[i]:Yn(h,s,"end",Math.min)}})}}else o.push({source:t,target:h,start:n[r],end:n[l]})}return o}(s,n,a);for(const{source:i,target:c,start:d,end:u}of l){const{style:{backgroundColor:l=o}={}}=i,f=!0!==n;e.save(),e.fillStyle=l,function(t,e,i){var{top:s,bottom:n}=e.chart.chartArea,{property:a,start:e,end:i}=i||{};"x"===a&&(t.beginPath(),t.rect(e,s,i-e,n-s),t.clip())}(e,r,f&&$n(a,d,u)),e.beginPath();var h=!!s.pathSegment(e,i);let t;if(f){h?e.closePath():Un(e,n,u,a);const i=!!n.pathSegment(e,c,{move:h,reverse:!0});t=h&&i,t||Un(e,n,d,a)}e.closePath(),e.fill(t?"evenodd":"nonzero"),e.restore()}}function qn(t,e,i){var s=Nn(e),{line:n,scale:a,axis:o}=e,r=n.options,e=r.fill,r=r.backgroundColor,{above:e=r,below:r=r}=e||{};s&&n.points.length&&(Gt(t,i),function(t,e){var{line:i,target:s,above:n,below:a,area:o,scale:r}=e,e=i._loop?"angle":e.axis;t.save(),"x"===e&&a!==n&&(jn(t,s,o.top),Xn(t,{line:i,target:s,color:n,scale:r,property:e}),t.restore(),t.save(),jn(t,s,o.bottom)),Xn(t,{line:i,target:s,color:a,scale:r,property:e}),t.restore()}(t,{line:n,target:s,above:e,below:r,area:i,scale:a,axis:o}),Zt(t))}var Kn={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let a,o,r,l;for(o=0;o<s;++o)a=t.getDatasetMeta(o),r=a.dataset,l=null,r&&r.options&&r instanceof Sn&&(l={visible:t.isDatasetVisible(o),index:o,fill:function(s,t,e){var i=function(){var t=s.options,e=t.fill;let i=U(e&&e.target,e);return void 0===i&&(i=!!t.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}();if(j(i))return!isNaN(i.value)&&i;let n=parseFloat(i);return $(n)&&Math.floor(n)===n?("-"!==i[0]&&"+"!==i[0]||(n=t+n),!(n===t||n<0||n>=e)&&n):0<=["origin","start","end","stack","shape"].indexOf(i)&&i}(r,o,s),chart:t,axis:a.controller.options.indexAxis,scale:a.vScale,line:r}),a.$filler=l,n.push(l);for(o=0;o<s;++o)l=n[o],l&&!1!==l.fill&&(l.fill=function(t,e,i){let s=t[e].fill;const n=[e];var a;if(!i)return s;for(;!1!==s&&-1===n.indexOf(s);){if(!$(s))return s;if(!(a=t[s]))return!1;if(a.visible)return s;n.push(s),s=a.fill}return!1}(n,o,i.propagate))},beforeDraw(e,t,i){var s="beforeDraw"===i.drawTime,n=e.getSortedVisibleDatasetMetas(),a=e.chartArea;for(let t=n.length-1;0<=t;--t){const i=n[t].$filler;i&&(i.line.updateControlPoints(a,i.axis),s&&qn(e.ctx,i,a))}},beforeDatasetsDraw(e,t,i){if("beforeDatasetsDraw"===i.drawTime){var s=e.getSortedVisibleDatasetMetas();for(let t=s.length-1;0<=t;--t){const i=s[t].$filler;i&&qn(e.ctx,i,e.chartArea)}}},beforeDatasetDraw(t,e,i){e=e.meta.$filler;e&&!1!==e.fill&&"beforeDatasetDraw"===i.drawTime&&qn(t.ctx,e,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Gn=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class Zn extends ps{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const i=this.options.labels||{};let t=K(i.generateLabels,[this.chart],this)||[];i.filter&&(t=t.filter(t=>i.filter(t,this.chart.data))),i.sort&&(t=t.sort((t,e)=>i.sort(t,e,this.chart.data))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:i,ctx:s}=this;if(i.display){var n=i.labels,a=ze(n.font),o=a.size,r=this._computeTitleHeight(),{boxWidth:l,itemHeight:n}=Gn(n,o);let t,e;s.font=a.string,this.isHorizontal()?(t=this.maxWidth,e=this._fitRows(r,o,l,n)+10):(e=this.maxHeight,t=this._fitCols(r,o,l,n)+10),this.width=Math.min(t,i.maxWidth||this.maxWidth),this.height=Math.min(e,i.maxHeight||this.maxHeight)}else this.width=this.height=0}_fitRows(t,i,s,n){const{ctx:a,maxWidth:o,options:{labels:{padding:r}}}=this,l=this.legendHitBoxes=[],h=this.lineWidths=[0],c=n+r;let d=t;a.textAlign="left",a.textBaseline="middle";let u=-1,f=-c;return this.legendItems.forEach((t,e)=>{t=s+i/2+a.measureText(t.text).width;(0===e||h[h.length-1]+t+2*r>o)&&(d+=c,h[h.length-(0<e?0:1)]=0,f+=c,u++),l[e]={left:0,top:f,row:u,width:t,height:n},h[h.length-1]+=t+r}),d}_fitCols(t,i,s,n){const{ctx:a,maxHeight:e,options:{labels:{padding:o}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=e-t;let c=o,d=0,u=0,f=0,g=0;return this.legendItems.forEach((t,e)=>{t=s+i/2+a.measureText(t.text).width;0<e&&u+n+2*o>h&&(c+=d+o,l.push({width:d,height:u}),f+=d+o,g++,d=u=0),r[e]={left:f,top:u,col:g,width:t,height:n},d=Math.max(d,t),u+=n+o}),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(this.options.display){const i=this._computeTitleHeight(),{legendHitBoxes:s,options:{align:n,labels:{padding:a},rtl:t}}=this,o=Si(t,this.left,this.width);if(this.isHorizontal()){let t=0,e=P(n,this.left+a,this.right-this.lineWidths[t]);for(const r of s)t!==r.row&&(t=r.row,e=P(n,this.left+a,this.right-this.lineWidths[t])),r.top+=this.top+i+a,r.left=o.leftForLtr(o.x(e),r.width),e+=r.width+a}else{let t=0,e=P(n,this.top+i+a,this.bottom-this.columnSizes[t].height);for(const l of s)l.col!==t&&(t=l.col,e=P(n,this.top+i+a,this.bottom-this.columnSizes[t].height)),l.top=e,l.left+=this.left+a,l.left=o.leftForLtr(o.x(l.left),l.width),e+=l.height+a}}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){var t;this.options.display&&(Gt(t=this.ctx,this),this._draw(),Zt(t))}_draw(){const{options:o,columnSizes:r,lineWidths:l,ctx:h}=this,{align:c,labels:d}=o,u=pt.color,f=Si(o.rtl,this.left,this.width),g=ze(d.font),{color:p,padding:m}=d,x=g.size,b=x/2;let v;this.drawTitle(),h.textAlign=f.textAlign("left"),h.textBaseline="middle",h.lineWidth=.5,h.font=g.string;const{boxWidth:_,boxHeight:y,itemHeight:w}=Gn(d,x),M=this.isHorizontal(),k=this._computeTitleHeight();v=M?{x:P(c,this.left+m,this.right-l[0]),y:this.top+m+k,line:0}:{x:this.left+m,y:P(c,this.top+k+m,this.bottom-r[0].height),line:0},Pi(this.ctx,o.textDirection);const S=w+m;this.legendItems.forEach((t,e)=>{h.strokeStyle=t.fontColor||p,h.fillStyle=t.fontColor||p;var i=h.measureText(t.text).width,s=f.textAlign(t.textAlign||(t.textAlign=d.textAlign)),i=_+b+i;let n=v.x,a=v.y;f.setWidth(this.width),M?0<e&&n+i+m>this.right&&(a=v.y+=S,v.line++,n=v.x=P(c,this.left+m,this.right-l[v.line])):0<e&&a+S>this.bottom&&(n=v.x=n+r[v.line].width+m,v.line++,a=v.y=P(c,this.top+k+m,this.bottom-r[v.line].height)),function(t,e,i){if(!(isNaN(_)||_<=0||isNaN(y)||y<0)){h.save();var s=U(i.lineWidth,1);if(h.fillStyle=U(i.fillStyle,u),h.lineCap=U(i.lineCap,"butt"),h.lineDashOffset=U(i.lineDashOffset,0),h.lineJoin=U(i.lineJoin,"miter"),h.lineWidth=s,h.strokeStyle=U(i.strokeStyle,u),h.setLineDash(U(i.lineDash,[])),d.usePointStyle){var n={radius:_*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:s},a=f.xPlus(t,_/2);qt(h,n,a,e+b)}else{const o=e+Math.max((x-y)/2,0),r=f.leftForLtr(t,_),d=Ee(i.borderRadius);h.beginPath(),Object.values(d).some(t=>0!==t)?ee(h,{x:r,y:o,w:_,h:y,radius:d}):h.rect(r,o,_,y),h.fill(),0!==s&&h.stroke()}h.restore()}}(f.x(n),a,t),n=D(s,n+_+b,M?n+i:this.right,o.rtl),e=f.x(n),s=a,t=t,te(h,t.text,e,s+w/2,g,{strikethrough:t.hidden,textAlign:f.textAlign(t.textAlign)}),M?v.x+=i+m:v.y+=S}),Di(this.ctx,o.textDirection)}drawTitle(){const s=this.options,n=s.title,a=ze(n.font),o=Ie(n.padding);if(n.display){const l=Si(s.rtl,this.left,this.width),h=this.ctx,c=n.position,d=a.size/2,u=o.top+d;let t,e=this.left,i=this.width;if(this.isHorizontal())i=Math.max(...this.lineWidths),t=this.top+u,e=P(s.align,e,this.right-i);else{const n=this.columnSizes.reduce((t,e)=>Math.max(t,e.height),0);t=u+P(s.align,this.top,this.bottom-n-s.labels.padding-this._computeTitleHeight())}var r=P(c,e,e+i);h.textAlign=l.textAlign(f(c)),h.textBaseline="middle",h.strokeStyle=n.color,h.fillStyle=n.color,h.font=a.string,te(h,n.text,r,t,a)}}_computeTitleHeight(){var t=this.options.title,e=ze(t.font),i=Ie(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,s,n;if(Ht(t,this.left,this.right)&&Ht(e,this.top,this.bottom))for(n=this.legendHitBoxes,i=0;i<n.length;++i)if(Ht(t,(s=n[i]).left,s.left+s.width)&&Ht(e,s.top,s.top+s.height))return this.legendItems[i];return null}handleEvent(t){var e,i,s,n=this.options;("mousemove"===(s=t.type)&&(n.onHover||n.onLeave)||n.onClick&&("click"===s||"mouseup"===s))&&(e=this._getLegendItemAt(t.x,t.y),"mousemove"===t.type?(s=null!==(i=this._hoveredItem)&&null!==e&&i.datasetIndex===e.datasetIndex&&i.index===e.index,i&&!s&&K(n.onLeave,[t,i,this],this),(this._hoveredItem=e)&&!s&&K(n.onHover,[t,e,this],this)):e&&K(n.onClick,[t,e,this],this))}}var Jn={id:"legend",_element:Zn,start(t,e,i){var s=t.legend=new Zn({ctx:t.ctx,options:i,chart:t});Ge.configure(t,s,i),Ge.addBox(t,s)},stop(t){Ge.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;Ge.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const s=t.data.datasets,{labels:{usePointStyle:n,pointStyle:a,textAlign:o,color:r}}=t.legend.options;return t._getSortedDatasetMetas().map(t=>{var e=t.controller.getStyle(n?0:void 0),i=Ie(e.borderWidth);return{text:s[t.index].label,fillStyle:e.backgroundColor,fontColor:r,hidden:!t.visible,lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:(i.width+i.height)/4,strokeStyle:e.borderColor,pointStyle:a||e.pointStyle,rotation:e.rotation,textAlign:o||e.textAlign,borderRadius:0,datasetIndex:t.index}},this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Qn extends ps{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){var i=this.options;this.left=0,this.top=0,i.display?(this.width=this.right=t,this.height=this.bottom=e,e=H(i.text)?i.text.length:1,this._padding=Ie(i.padding),i=e*ze(i.font).lineHeight+this._padding.height,this.isHorizontal()?this.height=i:this.width=i):this.width=this.height=this.right=this.bottom=0}isHorizontal(){var t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){var{top:e,left:i,bottom:s,right:n,options:a}=this,o=a.align;let r,l,h,c=0;return r=this.isHorizontal()?(l=P(o,i,n),h=e+t,n-i):(c="left"===a.position?(l=i+t,h=P(o,s,e),-.5*mt):(l=n-t,h=P(o,e,s),.5*mt),s-e),{titleX:l,titleY:h,maxWidth:r,rotation:c}}draw(){var t,e,i,s,n,a=this.ctx,o=this.options;o.display&&(n=(t=ze(o.font)).lineHeight/2+this._padding.top,{titleX:e,titleY:i,maxWidth:s,rotation:n}=this._drawArgs(n),te(a,o.text,0,0,t,{color:o.color,maxWidth:s,rotation:n,textAlign:f(o.align),textBaseline:"middle",translation:[e,i]}))}}var ta={id:"title",_element:Qn,start(t,e,i){var s;s=t,t=i,i=new Qn({ctx:s.ctx,options:t,chart:s}),Ge.configure(s,i,t),Ge.addBox(s,i),s.titleBlock=i},stop(t){var e=t.titleBlock;Ge.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;Ge.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ea=new WeakMap;var ia={id:"subtitle",start(t,e,i){var s=new Qn({ctx:t.ctx,options:i,chart:t});Ge.configure(t,s,i),Ge.addBox(t,s),ea.set(t,s)},stop(t){Ge.removeBox(t,ea.get(t)),ea.delete(t)},beforeUpdate(t,e,i){const s=ea.get(t);Ge.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const sa={average(t){if(!t.length)return!1;let e,i,s=0,n=0,a=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++a}}return{x:s/a,y:n/a}},nearest(t,e){if(!t.length)return!1;let i,s,n,a=e.x,o=e.y,r=Number.POSITIVE_INFINITY;for(i=0,s=t.length;i<s;++i){const s=t[i].element;if(s&&s.hasValue()){const t=zt(e,s.getCenterPoint());t<r&&(r=t,n=s)}}if(n){const t=n.tooltipPosition();a=t.x,o=t.y}return{x:a,y:o}}};function na(t,e){return e&&(H(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function aa(t){return("string"==typeof t||t instanceof String)&&-1<t.indexOf("\n")?t.split("\n"):t}function oa(t,e){const i=t.chart.ctx,{body:s,footer:n,title:a}=t,{boxWidth:o,boxHeight:r}=e,l=ze(e.bodyFont),h=ze(e.titleFont),c=ze(e.footerFont),d=a.length,u=n.length,f=s.length,g=Ie(e.padding);let p=g.height,m=0,x=s.reduce((t,e)=>t+e.before.length+e.lines.length+e.after.length,0);x+=t.beforeBody.length+t.afterBody.length,d&&(p+=d*h.lineHeight+(d-1)*e.titleSpacing+e.titleMarginBottom),x&&(p+=f*(e.displayColors?Math.max(r,l.lineHeight):l.lineHeight)+(x-f)*l.lineHeight+(x-1)*e.bodySpacing),u&&(p+=e.footerMarginTop+u*c.lineHeight+(u-1)*e.footerSpacing);let b=0;function v(t){m=Math.max(m,i.measureText(t).width+b)}return i.save(),i.font=h.string,G(t.title,v),i.font=l.string,G(t.beforeBody.concat(t.afterBody),v),b=e.displayColors?o+2+e.boxPadding:0,G(s,t=>{G(t.before,v),G(t.lines,v),G(t.after,v)}),b=0,i.font=c.string,G(t.footer,v),i.restore(),m+=g.width,{width:m,height:p}}function ra(i,t,s){var e=s.yAlign||t.yAlign||function(){var{y:t,height:e}=s;return t<e/2?"top":t>i.height-e/2?"bottom":"center"}();return{xAlign:s.xAlign||t.xAlign||function(n,a,o,t){var{x:e,width:i}=o,{width:s,chartArea:{left:r,right:l}}=n;let h="center";return"center"===t?h=e<=(r+l)/2?"left":"right":e<=i/2?h="left":s-i/2<=e&&(h="right"),function(t){var{x:e,width:i}=o,s=a.caretSize+a.caretPadding;return"left"===t&&e+i+s>n.width||"right"===t&&e-i-s<0}(h)&&(h="center"),h}(i,t,s,e),yAlign:e}}function la(t,i,e,s){var{caretSize:n,caretPadding:a,cornerRadius:o}=t,{xAlign:r,yAlign:l}=e,h=n+a,{topLeft:c,topRight:t,bottomLeft:e,bottomRight:a}=Ee(o);let d=function(){let{x:t,width:e}=i;return"right"===r?t-=e:"center"===r&&(t-=e/2),t}();o=function(){let{y:t,height:e}=i;return"top"===l?t+=h:t-="bottom"===l?e+h:e/2,t}();return"center"===l?"left"===r?d+=h:"right"===r&&(d-=h):"left"===r?d-=Math.max(c,e)+n:"right"===r&&(d+=Math.max(t,a)+n),{x:Wt(d,0,s.width-i.width),y:Wt(o,0,s.height-i.height)}}function ha(t,e,i){i=Ie(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function ca(t){return na([],aa(t))}function da(t,e){e=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return e?t.override(e):t}class ua extends ps{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){var t=this._cachedAnimations;if(t)return t;var e=this.chart,t=this.options.setContext(this.getContext()),e=t.enabled&&e.options.animation&&t.animations,t=new ss(this.chart,e);return e._cacheable&&(this._cachedAnimations=Object.freeze(t)),t}getContext(){return this.$context||(this.$context=Ve(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"}))}getTitle(t,e){const i=e["callbacks"],s=i.beforeTitle.apply(this,[t]),n=i.title.apply(this,[t]),a=i.afterTitle.apply(this,[t]);t=na(t=[],aa(s));return t=na(t,aa(n)),t=na(t,aa(a))}getBeforeBody(t,e){return ca(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const s=e["callbacks"],n=[];return G(t,t=>{const e={before:[],lines:[],after:[]},i=da(s,t);na(e.before,aa(i.beforeLabel.call(this,t))),na(e.lines,i.label.call(this,t)),na(e.after,aa(i.afterLabel.call(this,t))),n.push(e)}),n}getAfterBody(t,e){return ca(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const i=e["callbacks"],s=i.beforeFooter.apply(this,[t]),n=i.footer.apply(this,[t]),a=i.afterFooter.apply(this,[t]);t=na(t=[],aa(s));return t=na(t,aa(n)),t=na(t,aa(a))}_createItems(s){const t=this._active,n=this.chart.data,i=[],a=[],o=[];let e,r,l=[];for(e=0,r=t.length;e<r;++e)l.push(function(t,e){const{element:i,datasetIndex:s,index:n}=e,a=t.getDatasetMeta(s).controller,{label:o,value:r}=a.getLabelAndValue(n);return{chart:t,label:o,parsed:a.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:a.getDataset(),dataIndex:n,datasetIndex:s,element:i}}(this.chart,t[e]));return s.filter&&(l=l.filter((t,e,i)=>s.filter(t,e,i,n))),s.itemSort&&(l=l.sort((t,e)=>s.itemSort(t,e,n))),G(l,t=>{const e=da(s.callbacks,t);i.push(e.labelColor.call(this,t)),a.push(e.labelPointStyle.call(this,t)),o.push(e.labelTextColor.call(this,t))}),this.labelColors=i,this.labelPointStyles=a,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,a=[];if(s.length){const t=sa[i.position].call(this,s,this._eventPosition);a=this._createItems(i),this.title=this.getTitle(a,i),this.beforeBody=this.getBeforeBody(a,i),this.body=this.getBody(a,i),this.afterBody=this.getAfterBody(a,i),this.footer=this.getFooter(a,i);const e=this._size=oa(this,i),o=Object.assign({},t,e),r=ra(this.chart,i,o),l=la(i,o,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=a,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){s=this.getCaretPosition(t,i,s);e.lineTo(s.x1,s.y1),e.lineTo(s.x2,s.y2),e.lineTo(s.x3,s.y3)}getCaretPosition(t,e,i){var{xAlign:s,yAlign:n}=this,{caretSize:a,cornerRadius:o}=i,{topLeft:r,topRight:l,bottomLeft:h,bottomRight:c}=Ee(o),{x:i,y:o}=t,{width:t,height:e}=e;let d,u,f,g,p,m;return"center"===n?(p=o+e/2,m="left"===s?(d=i,u=d-a,g=p+a,p-a):(d=i+t,u=d+a,g=p-a,p+a),f=d):(u="left"===s?i+Math.max(r,h)+a:"right"===s?i+t-Math.max(l,c)-a:this.caretX,f="top"===n?(g=o,p=g-a,d=u-a,u+a):(g=o+e,p=g+a,d=u+a,u-a),m=g),{x1:d,x2:u,x3:f,y1:g,y2:p,y3:m}}drawTitle(t,e,i){var s=this.title,n=s.length;let a,o,r;if(n){const l=Si(i.rtl,this.x,this.width);for(t.x=ha(this,i.titleAlign,i),e.textAlign=l.textAlign(i.titleAlign),e.textBaseline="middle",a=ze(i.titleFont),o=i.titleSpacing,e.fillStyle=i.titleColor,e.font=a.string,r=0;r<n;++r)e.fillText(s[r],l.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+o,r+1===n&&(t.y+=i.titleMarginBottom-o)}}_drawColorBox(t,e,i,s,n){const a=this.labelColors[i],o=this.labelPointStyles[i],{boxHeight:r,boxWidth:l,boxPadding:h}=n,c=ze(n.bodyFont),d=ha(this,"left",n),u=s.x(d),f=r<c.lineHeight?(c.lineHeight-r)/2:0,g=e.y+f;if(n.usePointStyle){const e={radius:Math.min(l,r)/2,pointStyle:o.pointStyle,rotation:o.rotation,borderWidth:1},i=s.leftForLtr(u,l)+l/2,h=g+r/2;t.strokeStyle=n.multiKeyBackground,t.fillStyle=n.multiKeyBackground,qt(t,e,i,h),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,qt(t,e,i,h)}else{t.lineWidth=a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=s.leftForLtr(u,l-h),i=s.leftForLtr(s.xPlus(u,1),l-h-2),o=Ee(a.borderRadius);Object.values(o).some(t=>0!==t)?(t.beginPath(),t.fillStyle=n.multiKeyBackground,ee(t,{x:e,y:g,w:l,h:r,radius:o}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),ee(t,{x:i,y:g+1,w:l-2,h:r-2,radius:o}),t.fill()):(t.fillStyle=n.multiKeyBackground,t.fillRect(e,g,l,r),t.strokeRect(e,g,l,r),t.fillStyle=a.backgroundColor,t.fillRect(i,g+1,l-2,r-2))}t.fillStyle=this.labelTextColors[i]}drawBody(e,i,t){const s=this["body"],{bodySpacing:n,bodyAlign:a,displayColors:o,boxHeight:r,boxWidth:l,boxPadding:h}=t,c=ze(t.bodyFont);let d=c.lineHeight,u=0;function f(t){i.fillText(t,g.x(e.x+u),e.y+d/2),e.y+=d+n}const g=Si(t.rtl,this.x,this.width),p=g.textAlign(a);let m,x,b,v,_,y,w;for(i.textAlign=a,i.textBaseline="middle",i.font=c.string,e.x=ha(this,p,t),i.fillStyle=t.bodyColor,G(this.beforeBody,f),u=o&&"right"!==p?"center"===a?l/2+h:l+2+h:0,v=0,y=s.length;v<y;++v){for(m=s[v],x=this.labelTextColors[v],i.fillStyle=x,G(m.before,f),b=m.lines,o&&b.length&&(this._drawColorBox(i,e,v,g,t),d=Math.max(c.lineHeight,r)),_=0,w=b.length;_<w;++_)f(b[_]),d=c.lineHeight;G(m.after,f)}u=0,d=c.lineHeight,G(this.afterBody,f),e.y-=n}drawFooter(t,e,i){var s=this.footer,n=s.length;let a,o;if(n){const r=Si(i.rtl,this.x,this.width);for(t.x=ha(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=r.textAlign(i.footerAlign),e.textBaseline="middle",a=ze(i.footerFont),e.fillStyle=i.footerColor,e.font=a.string,o=0;o<n;++o)e.fillText(s[o],r.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+i.footerSpacing}}drawBackground(t,e,i,s){var{xAlign:n,yAlign:a}=this,{x:o,y:r}=t,{width:l,height:h}=i,{topLeft:c,topRight:d,bottomLeft:u,bottomRight:f}=Ee(s.cornerRadius);e.fillStyle=s.backgroundColor,e.strokeStyle=s.borderColor,e.lineWidth=s.borderWidth,e.beginPath(),e.moveTo(o+c,r),"top"===a&&this.drawCaret(t,e,i,s),e.lineTo(o+l-d,r),e.quadraticCurveTo(o+l,r,o+l,r+d),"center"===a&&"right"===n&&this.drawCaret(t,e,i,s),e.lineTo(o+l,r+h-f),e.quadraticCurveTo(o+l,r+h,o+l-f,r+h),"bottom"===a&&this.drawCaret(t,e,i,s),e.lineTo(o+u,r+h),e.quadraticCurveTo(o,r+h,o,r+h-u),"center"===a&&"left"===n&&this.drawCaret(t,e,i,s),e.lineTo(o,r+c),e.quadraticCurveTo(o,r,o+c,r),e.closePath(),e.fill(),0<s.borderWidth&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=sa[t.position].call(this,this._active,this._eventPosition);var a,o;i&&(a=this._size=oa(this,t),o=la(t,o=Object.assign({},i,this._size),t=ra(e,t,o),e),s._to===o.x&&n._to===o.y||(this.xAlign=t.xAlign,this.yAlign=t.yAlign,this.width=a.width,this.height=a.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,o)))}}draw(t){var e=this.options.setContext(this.getContext());let i=this.opacity;if(i){this._updateAnimationTarget(e);const a={width:this.width,height:this.height},o={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;var s=Ie(e.padding),n=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&n&&(t.save(),t.globalAlpha=i,this.drawBackground(o,t,a,e),Pi(t,e.textDirection),o.y+=s.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),Di(t,e.textDirection),t.restore())}}getActiveElements(){return this._active||[]}setActiveElements(t,e){var i=this._active,s=t.map(({datasetIndex:t,index:e})=>{var i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}),t=!Z(i,s),i=this._positionChanged(s,e);(t||i)&&(this._active=s,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;var s=this.options,n=this._active||[],a=this._getActiveElements(t,n,e,i),i=this._positionChanged(a,t),i=e||!Z(a,n)||i;return i&&(this._active=a,(s.enabled||s.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),i}_getActiveElements(t,e,i,s){var n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const a=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&a.reverse(),a}_positionChanged(t,e){var{caretX:i,caretY:s,options:n}=this,e=sa[n.position].call(this,t,e);return!1!==e&&(i!==e.x||s!==e.y)}}ua.positioners=sa;ye={id:"tooltip",_element:ua,positioners:sa,afterInit(t,e,i){i&&(t.tooltip=new ua({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip,i={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",i)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i))},afterEvent(t,e){var i;t.tooltip&&(i=e.replay,t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0))},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:t,title(t){if(0<t.length){var e=t[0],i=e.chart.data.labels,t=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(0<t&&e.dataIndex<t)return i[e.dataIndex]}return""},afterTitle:t,beforeBody:t,beforeLabel:t,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");t=t.formattedValue;return N(t)||(e+=t),e},labelColor(t){t=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){t=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:t,afterBody:t,beforeFooter:t,footer:t,afterFooter:t}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},ta=Object.freeze({__proto__:null,Decimation:Fn,Filler:Kn,Legend:Jn,SubTitle:ia,Title:ta,Tooltip:ye});class fa extends ks{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){var e=this._addedLabels;if(e.length){const t=this.getLabels();for(var{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(N(t))return null;var i,s,n,a,o,r,l=this.getLabels();return e=e=isFinite(e)&&l[e]===t?e:(i=l,n=U(e,s=t),a=this._addedLabels,-1===(r=i.indexOf(s))?(o=n,t=a,"string"==typeof(a=s)?(o=i.push(a)-1,t.unshift({index:o,label:a})):isNaN(a)&&(o=null),o):r!==i.lastIndexOf(s)?n:r),l=l.length-1,null===e?null:Wt(Math.round(e),0,l)}determineDataLimits(){var{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const e=this.min,i=this.max,t=this.options.offset,s=[];let n=this.getLabels();n=0===e&&i===n.length-1?n:n.slice(e,i+1),this._valueRange=Math.max(n.length-(t?0:1),1),this._startValue=this.min-(t?.5:0);for(let t=e;t<=i;t++)s.push({value:t});return s}getLabelForValue(t){var e=this.getLabels();return 0<=t&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return null===(t="number"!=typeof t?this.parse(t):t)?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){var e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function ga(t,e,{horizontal:i,minRotation:s}){s=Lt(s),s=(i?Math.sin(s):Math.cos(s))||.001;return Math.min(e/s,.75*e*(""+t).length)}fa.id="category",fa.defaults={ticks:{callback:fa.prototype.getLabelForValue}};class pa extends ks{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return N(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const e=this.options["beginAtZero"],{minDefined:i,maxDefined:s}=this.getUserBounds();let{min:n,max:a}=this;var o=t=>n=i?n:t,r=t=>a=s?a:t;if(e){const e=St(n),i=St(a);e<0&&i<0?r(0):0<e&&0<i&&o(0)}if(n===a){let t=1;(a>=Number.MAX_SAFE_INTEGER||n<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*a)),r(a+t),e||o(n-t)}this.min=n,this.max=a}getTickLimit(){let t,{maxTicksLimit:e,stepSize:i}=this.options.ticks;return i?(t=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,1e3<t&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),e=e||11),e&&(t=Math.min(e,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){var t=this.options,e=t.ticks,i=this.getTickLimit();const s=function(t,e){const i=[],{bounds:s,step:n,min:a,max:o,precision:r,count:l,maxTicks:h,maxDigits:c,includeBounds:d}=t,u=n||1,f=h-1,{min:g,max:p}=e,m=!N(a),x=!N(o),b=!N(l),v=(p-g)/(c+1);let _,y,w,M,k=Pt((p-g)/f/u)*u;if(k<1e-14&&!m&&!x)return[{value:g},{value:p}];M=Math.ceil(p/k)-Math.floor(g/k),M>f&&(k=Pt(M*k/f/u)*u),N(r)||(_=Math.pow(10,r),k=Math.ceil(k*_)/_),w="ticks"===s?(y=Math.floor(g/k)*k,Math.ceil(p/k)*k):(y=g,p),m&&x&&n&&At((o-a)/n,k/1e3)?(M=Math.round(Math.min((o-a)/k,h)),k=(o-a)/M,y=a,w=o):b?(y=m?a:y,w=x?o:w,M=l-1,k=(w-y)/M):(M=(w-y)/k,M=Ot(M,Math.round(M),k/1e3)?Math.round(M):Math.ceil(M));e=Math.max(Et(k),Et(y));_=Math.pow(10,N(r)?e:r),y=Math.round(y*_)/_,w=Math.round(w*_)/_;let S=0;for(m&&(d&&y!==a?(i.push({value:a}),y<a&&S++,Ot(Math.round((y+S*k)*_)/_,a,ga(a,v,t))&&S++):y<a&&S++);S<M;++S)i.push({value:Math.round((y+S*k)*_)/_});return x&&d&&w!==o?i.length&&Ot(i[i.length-1].value,o,ga(o,v,t))?i[i.length-1].value=o:i.push({value:o}):x&&w!==o||i.push({value:w}),i}({maxTicks:i=Math.max(2,i),bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&Tt(s,this,"value"),t.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){var t=this.ticks;let e=this.min,i=this.max;super.configure(),this.options.offset&&t.length&&(t=(i-e)/Math.max(t.length-1,1)/2,e-=t,i+=t),this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return ki(t,this.chart.options.locale,this.options.ticks.format)}}class ma extends pa{determineDataLimits(){var{min:t,max:e}=this.getMinMax(!0);this.min=$(t)?t:0,this.max=$(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){var t=this.isHorizontal(),e=t?this.width:this.height,i=Lt(this.options.ticks.minRotation),t=(t?Math.sin(i):Math.cos(i))||.001,i=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,i.lineHeight/t))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function xa(t){return 1==t/Math.pow(10,Math.floor(kt(t)))}ma.id="linear",ma.defaults={ticks:{callback:xs.formatters.numeric}};class ba extends ks{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){e=pa.prototype.parse.apply(this,[t,e]);if(0!==e)return $(e)&&0<e?e:null;this._zero=!0}determineDataLimits(){var{min:t,max:e}=this.getMinMax(!0);this.min=$(t)?Math.max(0,t):null,this.max=$(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:i}=this.getUserBounds();let s=this.min,n=this.max;var t=t=>s=e?s:t,a=t=>n=i?n:t,o=(t,e)=>Math.pow(10,Math.floor(kt(t))+e);s===n&&(s<=0?(t(1),a(10)):(t(o(s,-1)),a(o(n,1)))),s<=0&&t(o(n,-1)),n<=0&&a(o(s,1)),this._zero&&this.min!==this._suggestedMin&&s===o(this.min,0)&&t(o(s,-1)),this.min=s,this.max=n}buildTicks(){const t=this.options,e=function(t,e){const i=Math.floor(kt(e.max)),s=Math.ceil(e.max/Math.pow(10,i)),n=[];let a=Y(t.min,Math.pow(10,Math.floor(kt(e.min)))),o=Math.floor(kt(a)),r=Math.floor(a/Math.pow(10,o)),l=o<0?Math.pow(10,Math.abs(o)):1;for(;n.push({value:a,major:xa(a)}),++r,10===r&&(r=1,++o,l=0<=o?1:l),a=Math.round(r*Math.pow(10,o)*l)/l,o<i||o===i&&r<s;);t=Y(t.max,a);return n.push({value:t,major:xa(a)}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&Tt(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":ki(t,this.chart.options.locale,this.options.ticks.format)}configure(){var t=this.min;super.configure(),this._startValue=kt(t),this._valueRange=kt(this.max)-kt(t)}getPixelForValue(t){return null===(t=void 0===t||0===t?this.min:t)||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(kt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){t=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+t*this._valueRange)}}function va(t){var e=t.ticks;if(e.display&&t.display){const t=Ie(e.backdropPadding);return U(e.font&&e.font.size,pt.font.size)+t.height}return 0}function _a(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||n<t?{start:e-i,end:e}:{start:e,end:e+i}}function ya(e){const i={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},s=Object.assign({},i),n=[],a=[],o=e._pointLabels.length,r=e.options.pointLabels,l=r.centerPointLabels?mt/o:0;for(let t=0;t<o;t++){const o=r.setContext(e.getPointLabelContext(t));a[t]=o.padding;var h=e.getPointPosition(t,e.drawingArea+a[t],l),c=ze(o.font),d=(d=e.ctx,u=c,c=H(c=e._pointLabels[t])?c:[c],{w:Yt(d,u.string,c),h:c.length*u.lineHeight});n[t]=d;c=Bt(e.getIndexAngle(t)+l),u=Math.round(Rt(c));!function(t,e,i,s,n){var a=Math.abs(Math.sin(i)),i=Math.abs(Math.cos(i));let o=0,r=0;s.start<e.l?(o=(e.l-s.start)/a,t.l=Math.min(t.l,e.l-o)):s.end>e.r&&(o=(s.end-e.r)/a,t.r=Math.max(t.r,e.r+o)),n.start<e.t?(r=(e.t-n.start)/i,t.t=Math.min(t.t,e.t-r)):n.end>e.b&&(r=(n.end-e.b)/i,t.b=Math.max(t.b,e.b+r))}(s,i,c,_a(u,h.x,d.w,0,180),_a(u,h.y,d.h,90,270))}var d,u;e.setCenterPoint(i.l-s.l,s.r-i.r,i.t-s.t,s.b-i.b),e._pointLabelItems=function(e,i,s){const n=[],a=e._pointLabels.length,t=e.options,o=va(t)/2,r=e.drawingArea,l=t.pointLabels.centerPointLabels?mt/a:0;for(let t=0;t<a;t++){const a=e.getPointPosition(t,r+o+s[t],l),u=Math.round(Rt(Bt(a.angle+yt))),f=i[t],g=(h=a.y,c=f.h,90===(d=u)||270===d?h-=c/2:(270<d||d<90)&&(h-=c),h),p=0===(d=u)||180===d?"center":d<180?"left":"right",m=(c=a.x,h=f.w,"right"===(d=p)?c-=h:"center"===d&&(c-=h/2),c);n.push({x:a.x,y:g,textAlign:p,left:m,top:g,right:m+f.w,bottom:g+f.h})}var h,c,d;return n}(e,n,a)}function wa(e,i,t,s){const n=e["ctx"];if(t)n.arc(e.xCenter,e.yCenter,i,0,xt);else{var a=e.getPointPosition(0,i);n.moveTo(a.x,a.y);for(let t=1;t<s;t++)a=e.getPointPosition(t,i),n.lineTo(a.x,a.y)}}ba.id="logarithmic",ba.defaults={ticks:{callback:xs.formatters.logarithmic,major:{enabled:!0}}};class Ma extends pa{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){var t=this._padding=Ie(va(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){var{min:t,max:e}=this.getMinMax(!1);this.min=$(t)&&!isNaN(t)?t:0,this.max=$(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/va(this.options))}generateTickLabels(t){pa.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map((t,e)=>{e=K(this.options.pointLabels.callback,[t,e],this);return e||0===e?e:""}).filter((t,e)=>this.chart.getDataVisibility(e))}fit(){var t=this.options;t.display&&t.pointLabels.display?ya(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){return Bt(t*(xt/(this._pointLabels.length||1))+Lt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(N(t))return NaN;var e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(N(t))return NaN;t/=this.drawingArea/(this.max-this.min);return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(t){var e=this._pointLabels||[];if(0<=t&&t<e.length){e=e[t];return Ve(this.getContext(),{label:e,index:t,type:"pointLabel"})}}getPointPosition(t,e,i=0){i=this.getIndexAngle(t)-yt+i;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){var{left:e,top:i,right:s,bottom:t}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:t}}drawBackground(){var{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),wa(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:s}=e,n=this._pointLabels.length;let a,o,r;if(e.pointLabels.display&&function(e,i){const{ctx:s,options:{pointLabels:n}}=e;for(let t=i-1;0<=t;t--){const i=n.setContext(e.getPointLabelContext(t)),a=ze(i.font),{x:o,y:r,textAlign:l,left:h,top:c,right:d,bottom:u}=e._pointLabelItems[t],f=i["backdropColor"];if(!N(f)){const e=Ie(i.backdropPadding);s.fillStyle=f,s.fillRect(h-e.left,c-e.top,d-h+e.width,u-c+e.height)}te(s,e._pointLabels[t],o,r+a.lineHeight/2,a,{color:i.color,textAlign:l,textBaseline:"middle"})}}(this,n),s.display&&this.ticks.forEach((t,e)=>{0!==e&&(o=this.getDistanceFromCenterForValue(t.value),function(t,e,i,s){const n=t.ctx,a=e.circular,{color:o,lineWidth:r}=e;!a&&!s||!o||!r||i<0||(n.save(),n.strokeStyle=o,n.lineWidth=r,n.setLineDash(e.borderDash),n.lineDashOffset=e.borderDashOffset,n.beginPath(),wa(t,i,a,s),n.closePath(),n.stroke(),n.restore())}(this,s.setContext(this.getContext(e-1)),o,n))}),i.display){for(t.save(),a=n-1;0<=a;a--){const s=i.setContext(this.getPointLabelContext(a)),{color:n,lineWidth:l}=s;l&&n&&(t.lineWidth=l,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,o=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),r=this.getPointPosition(a,o),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(r.x,r.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const o=this.ctx,r=this.options,l=r.ticks;if(l.display){var t=this.getIndexAngle(0);let n,a;o.save(),o.translate(this.xCenter,this.yCenter),o.rotate(t),o.textAlign="center",o.textBaseline="middle",this.ticks.forEach((t,e)=>{if(0!==e||r.reverse){var i=l.setContext(this.getContext(e)),s=ze(i.font);if(n=this.getDistanceFromCenterForValue(this.ticks[e].value),i.showLabelBackdrop){o.font=s.string,a=o.measureText(t.label).width,o.fillStyle=i.backdropColor;const r=Ie(i.backdropPadding);o.fillRect(-a/2-r.left,-n-s.size/2-r.top,a+r.width,s.size+r.height)}te(o,t.label,0,-n,s,{color:i.color})}}),o.restore()}}drawTitle(){}}Ma.id="radialLinear",Ma.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:xs.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Ma.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};const ka={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!(Ma.descriptors={angleLines:{_fallback:"grid"}}),size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Sa=Object.keys(ka);function Pa(t,e){return t-e}function Da(t,e){if(N(e))return null;const i=t._adapter,{parser:s,round:n,isoWeekday:a}=t._parseOpts;let o=e;return"function"==typeof s&&(o=s(o)),$(o)||(o="string"==typeof s?i.parse(o,s):i.parse(o)),null===o?null:(n&&(o="week"!==n||!Ct(a)&&!0!==a?i.startOf(o,n):i.startOf(o,"isoWeek",a)),+o)}function Ca(e,i,s,n){const a=Sa.length;for(let t=Sa.indexOf(e);t<a-1;++t){const e=ka[Sa[t]],a=e.steps||Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((s-i)/(a*e.size))<=n)return Sa[t]}return Sa[a-1]}function Oa(t,e,i){var s,n;i?i.length&&({lo:s,hi:n}=ie(i,e),t[i[s]>=e?i[s]:i[n]]=!0):t[e]=!0}function Aa(t,e,i){const s=[],n={},a=e.length;let o,r;for(o=0;o<a;++o)r=e[o],n[r]=o,s.push({value:r,major:!1});return 0!==a&&i?function(t,e,i,s){const n=t._adapter,a=+n.startOf(e[0].value,s),o=e[e.length-1].value;let r,l;for(r=a;r<=o;r=+n.add(r,1,s))0<=(l=i[r])&&(e[l].major=!0);return e}(t,s,n,i):s}class Ta extends ks{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const i=t.time||(t.time={}),s=this._adapter=new Zs._date(t.adapters.date);it(i.displayFormats,s.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Da(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:s,max:n,minDefined:a,maxDefined:o}=this.getUserBounds();function r(t){a||isNaN(t.min)||(s=Math.min(s,t.min)),o||isNaN(t.max)||(n=Math.max(n,t.max))}a&&o||(r(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||r(this.getMinMax(!1))),s=$(s)&&!isNaN(s)?s:+e.startOf(Date.now(),i),n=$(n)&&!isNaN(n)?n:+e.endOf(Date.now(),i)+1,this.min=Math.min(s,n-1),this.max=Math.max(s+1,n)}_getLabelBounds(){var t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){var t=this.options,e=t.time,i=t.ticks,s="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const n=this.min,a=ae(s,n,this.max);return this._unit=e.unit||(i.autoSkip?Ca(e.minUnit,this.min,this.max,this._getLabelCapacity(n)):function(e,i,s,n,a){for(let t=Sa.length-1;t>=Sa.indexOf(s);t--){const s=Sa[t];if(ka[s].common&&e._adapter.diff(a,n,s)>=i-1)return s}return Sa[s?Sa.indexOf(s):0]}(this,a.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(i){for(let t=Sa.indexOf(i)+1,e=Sa.length;t<e;++t)if(ka[Sa[t]].common)return Sa[t]}(this._unit):void 0,this.initOffsets(s),t.reverse&&a.reverse(),Aa(this,a,this._majorUnit)}initOffsets(t){let e,i,s=0,n=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),s=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),n=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);t=t.length<3?.5:.25;s=Wt(s,0,t),n=Wt(n,0,t),this._offsets={start:s,end:n,factor:1/(s+1+n)}}_generate(){const t=this._adapter,e=this.min,i=this.max,s=this.options,n=s.time,a=n.unit||Ca(n.minUnit,e,i,this._getLabelCapacity(e)),o=U(n.stepSize,1),r="week"===a&&n.isoWeekday,l=Ct(r)||!0===r,h={};let c,d,u=e;if(l&&(u=+t.startOf(u,"isoWeek",r)),u=+t.startOf(u,l?"day":a),t.diff(i,e,a)>1e5*o)throw new Error(e+" and "+i+" are too far apart with stepSize of "+o+" "+a);var f="data"===s.ticks.source&&this.getDataTimestamps();for(c=u,d=0;c<i;c=+t.add(c,o,a),d++)Oa(h,c,f);return c!==i&&"ticks"!==s.bounds&&1!==d||Oa(h,c,f),Object.keys(h).sort((t,e)=>t-e).map(t=>+t)}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}_tickFormatFunction(t,e,i,s){var n=this.options,a=n.time.displayFormats,o=this._unit,r=this._majorUnit,l=o&&a[o],o=r&&a[r],a=i[e],a=r&&o&&a&&a.major,l=this._adapter.format(t,s||(a?o:l)),n=n.ticks.callback;return n?K(n,[l,e,i],this):l}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){var e=this._offsets,t=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+t)*e.factor)}getValueForPixel(t){var e=this._offsets,e=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+e*(this.max-this.min)}_getLabelSize(t){var e=this.options.ticks,i=this.ctx.measureText(t).width,s=Lt(this.isHorizontal()?e.maxRotation:e.minRotation),t=Math.cos(s),e=Math.sin(s),s=this._resolveTickFontOptions(0).size;return{w:i*t+s*e,h:i*e+s*t}}_getLabelCapacity(t){var e=this.options.time,i=e.displayFormats,i=i[e.unit]||i.millisecond,i=this._tickFormatFunction(t,0,Aa(this,[t],this._majorUnit),i),i=this._getLabelSize(i),i=Math.floor(this.isHorizontal()?this.width/i.w:this.height/i.h)-1;return 0<i?i:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;var s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(Da(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return he(t.sort(Pa))}}function La(t,e,i){let s,n,a,o,r=0,l=t.length-1;i?(e>=t[r].pos&&e<=t[l].pos&&({lo:r,hi:l}=se(t,"pos",e)),{pos:s,time:a}=t[r],{pos:n,time:o}=t[l]):(e>=t[r].time&&e<=t[l].time&&({lo:r,hi:l}=se(t,"time",e)),{time:s,pos:a}=t[r],{time:n,pos:o}=t[l]);t=n-s;return t?a+(o-a)*(e-s)/t:a}Ta.id="time",Ta.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Ra extends Ta{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){var t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=La(e,this.min),this._tableRange=La(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let a,o,r,l,h;for(a=0,o=t.length;a<o;++a)l=t[a],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(a=0,o=s.length;a<o;++a)h=s[a+1],r=s[a-1],l=s[a],Math.round((h+r)/2)!==l&&n.push({time:l,pos:a/(o-1)});return n}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(La(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){var e=this._offsets,e=this.getDecimalForPixel(t)/e.factor-e.end;return La(this._table,e*this._tableRange+this._minPos,!0)}}Ra.id="timeseries",Ra.defaults=Ta.defaults;ye=Object.freeze({__proto__:null,CategoryScale:fa,LinearScale:ma,LogarithmicScale:ba,RadialLinearScale:Ma,TimeScale:Ta,TimeSeriesScale:Ra});return Xs.register(un,ye,En,ta),Xs.helpers={...Ii},Xs._adapters=Zs,Xs.Animation=es,Xs.Animations=ss,Xs.animator=c,Xs.controllers=Ps.controllers.items,Xs.DatasetController=gs,Xs.Element=ps,Xs.elements=En,Xs.Interaction=Ce,Xs.layouts=Ge,Xs.platforms=Ji,Xs.Scale=ks,Xs.Ticks=xs,Object.assign(Xs,un,ye,En,ta,Ji),Xs.Chart=Xs,"undefined"!=typeof window&&(window.Chart=Xs),Xs});
"use strict";window.chartColors={green:"#75c181",gray:"#a9b5c9",text:"#252930",border:"#e7e9ed"};var randomDataPoint=function(){return Math.round(1e4*Math.random())},lineChartConfig={type:"line",data:{labels:["Day 1","Day 2","Day 3","Day 4","Day 5","Day 6","Day 7"],datasets:[{label:"Current week",fill:!1,backgroundColor:window.chartColors.green,borderColor:window.chartColors.green,data:[randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint()]},{label:"Previous week",borderDash:[3,5],backgroundColor:window.chartColors.gray,borderColor:window.chartColors.gray,data:[randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint(),randomDataPoint()],fill:!1}]},options:{responsive:!0,maintainAspectRatio:!1,legend:{display:!0,position:"bottom",align:"end"},title:{display:!0,text:"Chart.js Line Chart Example"},tooltips:{mode:"index",intersect:!1,titleMarginBottom:10,bodySpacing:10,xPadding:16,yPadding:16,borderColor:window.chartColors.border,borderWidth:1,backgroundColor:"#fff",bodyFontColor:window.chartColors.text,titleFontColor:window.chartColors.text,callbacks:{label:function(o,a){return 1e3<=parseInt(o.value)?"$"+o.value.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","):"$"+o.value}}},hover:{mode:"nearest",intersect:!0},scales:{x:{display:!0,gridLines:{drawBorder:!1,color:window.chartColors.border},scaleLabel:{display:!1}},y:{display:!0,gridLines:{drawBorder:!1,color:window.chartColors.border},scaleLabel:{display:!1},ticks:{beginAtZero:!0,userCallback:function(o,a,r){return"$"+o.toLocaleString()}}}}}};window.addEventListener("load",function(){var o=document.getElementById("canvas-sending-breakdown-chart").getContext("2d");window.myLine=new Chart(o,lineChartConfig)});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
