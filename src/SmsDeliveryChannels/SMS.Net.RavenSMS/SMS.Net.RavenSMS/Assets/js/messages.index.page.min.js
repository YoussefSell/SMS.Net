$('a[data-bs-toggle="tab"]').on('click', function (e) {
    loadData();
});

// init the date range picker
$("#search-period").daterangepicker({
    ranges: {
        'Today': [moment(), moment()],
        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
        'This Month': [moment().startOf('month'), moment().endOf('month')],
        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
    }
}, setDateRange);

// init the required variables
let messages = [];
let startDate = null;
let endDate = null;

// set the date range initial value
setDateRange(moment().subtract(29, 'days'), moment());

// load the initial data
loadData();

function loadData() {
    const requestData = {
        pageIndex: 1,
        pageSize: 5,
        searchQuery: $("#search-query").val(),
        endDate: endDate.format('yyyy-MM-DDTHH:mm:ssZ'),
        startDate: startDate.format('yyyy-MM-DDTHH:mm:ssZ'),
        Status: $('nav#messages-status a.active').attr('value'),
        to: [],
        from: [],
        clients: [],
    };
    console.log(requestData);

    $.ajax({
        url: '/ravenSMS/messages/index/?handler=Messages',
        data: requestData,
        success: function (result) {
            // save the result
            messages = result.data;

            // select table element
            const $table = $("#messages_table");

            // empty the table
            $("#messages_table > tbody").empty();

            // add the data to the table
            $.each(messages, function () {
                $table.append(buildTableRow(this));
            });

            // set the pagination details
            SetPagination(
                result.pagination.rowsCount,
                result.pagination.pageIndex,
                result.pagination.pageSize,
            );
        }
    });
}

function buildTableRow(message) {
    const messageDate = moment(message.date);

    return `<tr>
            <td style="max-width:150px" class="cell">${message.id}</td>
            <td class="cell"><span class="truncate">${message.client.name}</span></td>
            <td class="cell">${message.to}</td>
            <td class="cell"><span>${messageDate.format('DD/MMM/YYYY')}</span><span class="note">${messageDate.format('hh:mm A')}</span></td>
            <td class="cell">${GetStatusSpan(message.status)}</td>
            <td class="cell">
                <a class="btn-sm app-btn-secondary" href="Messages/Preview/${message.id}">View</a>
            </td>
        </tr>`
}

function SetPagination(rowsCount, pageIndex, pageSize) {
    // select the paginator
    const $paginator = $("#paginator");

    // empty the paginator
    $paginator.empty();

    // append the previous button
    $paginator.append(`
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
        `);

    // get the pagination logic
    const pagination = paginate(rowsCount, pageIndex, pageSize);

    // append pages
    $.each(pagination.pages, function () {
        $paginator.append(`<li class="page-item ${this == pagination.currentPage ? 'active' : ''}"><a class="page-link" href="#">${this}</a></li>`);
    })

    // append the Next button
    $paginator.append(`
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        `);
}

function GetStatusSpan(status) {
    switch (status) {
        case 1: return `<span class="badge bg-warning">Queued</span>`
        case 2: return `<span class="badge bg-danger">Failed</span>`
        case 3: return `<span class="badge bg-success">Sent</span>`
        default: return `<span class="badge bg-secondary">Created</span>`
    }
}

function setDateRange(start, end) {
    // set the values of the start & end dates
    startDate = start;
    endDate = end;

    // set the date range text
    $('#search-period span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Im1lc3NhZ2VzLmluZGV4LnBhZ2UubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgnYVtkYXRhLWJzLXRvZ2dsZT1cInRhYlwiXScpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICBsb2FkRGF0YSgpO1xyXG59KTtcclxuXHJcbi8vIGluaXQgdGhlIGRhdGUgcmFuZ2UgcGlja2VyXHJcbiQoXCIjc2VhcmNoLXBlcmlvZFwiKS5kYXRlcmFuZ2VwaWNrZXIoe1xyXG4gICAgcmFuZ2VzOiB7XHJcbiAgICAgICAgJ1RvZGF5JzogW21vbWVudCgpLCBtb21lbnQoKV0sXHJcbiAgICAgICAgJ0xhc3QgNyBEYXlzJzogW21vbWVudCgpLnN1YnRyYWN0KDYsICdkYXlzJyksIG1vbWVudCgpXSxcclxuICAgICAgICAnTGFzdCAzMCBEYXlzJzogW21vbWVudCgpLnN1YnRyYWN0KDI5LCAnZGF5cycpLCBtb21lbnQoKV0sXHJcbiAgICAgICAgJ1RoaXMgTW9udGgnOiBbbW9tZW50KCkuc3RhcnRPZignbW9udGgnKSwgbW9tZW50KCkuZW5kT2YoJ21vbnRoJyldLFxyXG4gICAgICAgICdMYXN0IE1vbnRoJzogW21vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLnN0YXJ0T2YoJ21vbnRoJyksIG1vbWVudCgpLnN1YnRyYWN0KDEsICdtb250aCcpLmVuZE9mKCdtb250aCcpXVxyXG4gICAgfVxyXG59LCBzZXREYXRlUmFuZ2UpO1xyXG5cclxuLy8gaW5pdCB0aGUgcmVxdWlyZWQgdmFyaWFibGVzXHJcbmxldCBtZXNzYWdlcyA9IFtdO1xyXG5sZXQgc3RhcnREYXRlID0gbnVsbDtcclxubGV0IGVuZERhdGUgPSBudWxsO1xyXG5cclxuLy8gc2V0IHRoZSBkYXRlIHJhbmdlIGluaXRpYWwgdmFsdWVcclxuc2V0RGF0ZVJhbmdlKG1vbWVudCgpLnN1YnRyYWN0KDI5LCAnZGF5cycpLCBtb21lbnQoKSk7XHJcblxyXG4vLyBsb2FkIHRoZSBpbml0aWFsIGRhdGFcclxubG9hZERhdGEoKTtcclxuXHJcbmZ1bmN0aW9uIGxvYWREYXRhKCkge1xyXG4gICAgY29uc3QgcmVxdWVzdERhdGEgPSB7XHJcbiAgICAgICAgcGFnZUluZGV4OiAxLFxyXG4gICAgICAgIHBhZ2VTaXplOiA1LFxyXG4gICAgICAgIHNlYXJjaFF1ZXJ5OiAkKFwiI3NlYXJjaC1xdWVyeVwiKS52YWwoKSxcclxuICAgICAgICBlbmREYXRlOiBlbmREYXRlLmZvcm1hdCgneXl5eS1NTS1ERFRISDptbTpzc1onKSxcclxuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZS5mb3JtYXQoJ3l5eXktTU0tRERUSEg6bW06c3NaJyksXHJcbiAgICAgICAgU3RhdHVzOiAkKCduYXYjbWVzc2FnZXMtc3RhdHVzIGEuYWN0aXZlJykuYXR0cigndmFsdWUnKSxcclxuICAgICAgICB0bzogW10sXHJcbiAgICAgICAgZnJvbTogW10sXHJcbiAgICAgICAgY2xpZW50czogW10sXHJcbiAgICB9O1xyXG4gICAgY29uc29sZS5sb2cocmVxdWVzdERhdGEpO1xyXG5cclxuICAgICQuYWpheCh7XHJcbiAgICAgICAgdXJsOiAnL3JhdmVuU01TL21lc3NhZ2VzL2luZGV4Lz9oYW5kbGVyPU1lc3NhZ2VzJyxcclxuICAgICAgICBkYXRhOiByZXF1ZXN0RGF0YSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIC8vIHNhdmUgdGhlIHJlc3VsdFxyXG4gICAgICAgICAgICBtZXNzYWdlcyA9IHJlc3VsdC5kYXRhO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VsZWN0IHRhYmxlIGVsZW1lbnRcclxuICAgICAgICAgICAgY29uc3QgJHRhYmxlID0gJChcIiNtZXNzYWdlc190YWJsZVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGVtcHR5IHRoZSB0YWJsZVxyXG4gICAgICAgICAgICAkKFwiI21lc3NhZ2VzX3RhYmxlID4gdGJvZHlcIikuZW1wdHkoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCB0aGUgZGF0YSB0byB0aGUgdGFibGVcclxuICAgICAgICAgICAgJC5lYWNoKG1lc3NhZ2VzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdGFibGUuYXBwZW5kKGJ1aWxkVGFibGVSb3codGhpcykpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNldCB0aGUgcGFnaW5hdGlvbiBkZXRhaWxzXHJcbiAgICAgICAgICAgIFNldFBhZ2luYXRpb24oXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucGFnaW5hdGlvbi5yb3dzQ291bnQsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucGFnaW5hdGlvbi5wYWdlSW5kZXgsXHJcbiAgICAgICAgICAgICAgICByZXN1bHQucGFnaW5hdGlvbi5wYWdlU2l6ZSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gYnVpbGRUYWJsZVJvdyhtZXNzYWdlKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlRGF0ZSA9IG1vbWVudChtZXNzYWdlLmRhdGUpO1xyXG5cclxuICAgIHJldHVybiBgPHRyPlxyXG4gICAgICAgICAgICA8dGQgc3R5bGU9XCJtYXgtd2lkdGg6MTUwcHhcIiBjbGFzcz1cImNlbGxcIj4ke21lc3NhZ2UuaWR9PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwiY2VsbFwiPjxzcGFuIGNsYXNzPVwidHJ1bmNhdGVcIj4ke21lc3NhZ2UuY2xpZW50Lm5hbWV9PC9zcGFuPjwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbGxcIj4ke21lc3NhZ2UudG99PC90ZD5cclxuICAgICAgICAgICAgPHRkIGNsYXNzPVwiY2VsbFwiPjxzcGFuPiR7bWVzc2FnZURhdGUuZm9ybWF0KCdERC9NTU0vWVlZWScpfTwvc3Bhbj48c3BhbiBjbGFzcz1cIm5vdGVcIj4ke21lc3NhZ2VEYXRlLmZvcm1hdCgnaGg6bW0gQScpfTwvc3Bhbj48L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJjZWxsXCI+JHtHZXRTdGF0dXNTcGFuKG1lc3NhZ2Uuc3RhdHVzKX08L3RkPlxyXG4gICAgICAgICAgICA8dGQgY2xhc3M9XCJjZWxsXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cImJ0bi1zbSBhcHAtYnRuLXNlY29uZGFyeVwiIGhyZWY9XCJNZXNzYWdlcy9QcmV2aWV3LyR7bWVzc2FnZS5pZH1cIj5WaWV3PC9hPlxyXG4gICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgIDwvdHI+YFxyXG59XHJcblxyXG5mdW5jdGlvbiBTZXRQYWdpbmF0aW9uKHJvd3NDb3VudCwgcGFnZUluZGV4LCBwYWdlU2l6ZSkge1xyXG4gICAgLy8gc2VsZWN0IHRoZSBwYWdpbmF0b3JcclxuICAgIGNvbnN0ICRwYWdpbmF0b3IgPSAkKFwiI3BhZ2luYXRvclwiKTtcclxuXHJcbiAgICAvLyBlbXB0eSB0aGUgcGFnaW5hdG9yXHJcbiAgICAkcGFnaW5hdG9yLmVtcHR5KCk7XHJcblxyXG4gICAgLy8gYXBwZW5kIHRoZSBwcmV2aW91cyBidXR0b25cclxuICAgICRwYWdpbmF0b3IuYXBwZW5kKGBcclxuICAgICAgICAgICAgPGxpIGNsYXNzPVwicGFnZS1pdGVtIGRpc2FibGVkXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInBhZ2UtbGlua1wiIGhyZWY9XCIjXCIgdGFiaW5kZXg9XCItMVwiIGFyaWEtZGlzYWJsZWQ9XCJ0cnVlXCI+UHJldmlvdXM8L2E+XHJcbiAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgYCk7XHJcblxyXG4gICAgLy8gZ2V0IHRoZSBwYWdpbmF0aW9uIGxvZ2ljXHJcbiAgICBjb25zdCBwYWdpbmF0aW9uID0gcGFnaW5hdGUocm93c0NvdW50LCBwYWdlSW5kZXgsIHBhZ2VTaXplKTtcclxuXHJcbiAgICAvLyBhcHBlbmQgcGFnZXNcclxuICAgICQuZWFjaChwYWdpbmF0aW9uLnBhZ2VzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgJHBhZ2luYXRvci5hcHBlbmQoYDxsaSBjbGFzcz1cInBhZ2UtaXRlbSAke3RoaXMgPT0gcGFnaW5hdGlvbi5jdXJyZW50UGFnZSA/ICdhY3RpdmUnIDogJyd9XCI+PGEgY2xhc3M9XCJwYWdlLWxpbmtcIiBocmVmPVwiI1wiPiR7dGhpc308L2E+PC9saT5gKTtcclxuICAgIH0pXHJcblxyXG4gICAgLy8gYXBwZW5kIHRoZSBOZXh0IGJ1dHRvblxyXG4gICAgJHBhZ2luYXRvci5hcHBlbmQoYFxyXG4gICAgICAgICAgICA8bGkgY2xhc3M9XCJwYWdlLWl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxhIGNsYXNzPVwicGFnZS1saW5rXCIgaHJlZj1cIiNcIj5OZXh0PC9hPlxyXG4gICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgIGApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBHZXRTdGF0dXNTcGFuKHN0YXR1cykge1xyXG4gICAgc3dpdGNoIChzdGF0dXMpIHtcclxuICAgICAgICBjYXNlIDE6IHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy13YXJuaW5nXCI+UXVldWVkPC9zcGFuPmBcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBgPHNwYW4gY2xhc3M9XCJiYWRnZSBiZy1kYW5nZXJcIj5GYWlsZWQ8L3NwYW4+YFxyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLXN1Y2Nlc3NcIj5TZW50PC9zcGFuPmBcclxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gYDxzcGFuIGNsYXNzPVwiYmFkZ2UgYmctc2Vjb25kYXJ5XCI+Q3JlYXRlZDwvc3Bhbj5gXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldERhdGVSYW5nZShzdGFydCwgZW5kKSB7XHJcbiAgICAvLyBzZXQgdGhlIHZhbHVlcyBvZiB0aGUgc3RhcnQgJiBlbmQgZGF0ZXNcclxuICAgIHN0YXJ0RGF0ZSA9IHN0YXJ0O1xyXG4gICAgZW5kRGF0ZSA9IGVuZDtcclxuXHJcbiAgICAvLyBzZXQgdGhlIGRhdGUgcmFuZ2UgdGV4dFxyXG4gICAgJCgnI3NlYXJjaC1wZXJpb2Qgc3BhbicpLmh0bWwoc3RhcnQuZm9ybWF0KCdNTU1NIEQsIFlZWVknKSArICcgLSAnICsgZW5kLmZvcm1hdCgnTU1NTSBELCBZWVlZJykpO1xyXG59Il19
