$('a[data-bs-toggle="tab"]').on("click",function(a){loadData()}),$("#search-period").daterangepicker({ranges:{Today:[moment(),moment()],"Last 7 Days":[moment().subtract(6,"days"),moment()],"Last 30 Days":[moment().subtract(29,"days"),moment()],"This Month":[moment().startOf("month"),moment().endOf("month")],"Last Month":[moment().subtract(1,"month").startOf("month"),moment().subtract(1,"month").endOf("month")]}},setDateRange);let messages=[],startDate=null,endDate=null;function loadData(){var a={pageIndex:1,pageSize:5,searchQuery:$("#search-query").val(),endDate:endDate.format("yyyy-MM-DDTHH:mm:ssZ"),startDate:startDate.format("yyyy-MM-DDTHH:mm:ssZ"),Status:$("nav#messages-status a.active").attr("value"),to:[],from:[],clients:[]};console.log(a),$.ajax({url:"/ravenSMS/messages/index/?handler=Messages",data:a,success:function(a){messages=a.data;const t=$("#messages_table");$("#messages_table > tbody").empty(),$.each(messages,function(){t.append(buildTableRow(this))}),SetPagination(a.pagination.rowsCount,a.pagination.pageIndex,a.pagination.pageSize)}})}function buildTableRow(a){const t=moment(a.date);return`<tr>
            <td style="max-width:150px" class="cell">${a.id}</td>
            <td class="cell"><span class="truncate">${a.client.name}</span></td>
            <td class="cell">${a.to}</td>
            <td class="cell"><span>${t.format("DD/MMM/YYYY")}</span><span class="note">${t.format("hh:mm A")}</span></td>
            <td class="cell">${GetStatusSpan(a.status)}</td>
            <td class="cell">
                <a class="btn-sm app-btn-secondary" href="Messages/Preview/${a.id}">View</a>
            </td>
        </tr>`}function SetPagination(a,t,e){const s=$("#paginator");s.empty(),s.append(`
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1" aria-disabled="true">Previous</a>
            </li>
        `);const n=paginate(a,t,e);$.each(n.pages,function(){s.append(`<li class="page-item ${this==n.currentPage?"active":""}"><a class="page-link" href="#">${this}</a></li>`)}),s.append(`
            <li class="page-item">
                <a class="page-link" href="#">Next</a>
            </li>
        `)}function GetStatusSpan(a){switch(a){case 1:return'<span class="badge bg-warning">Queued</span>';case 2:return'<span class="badge bg-danger">Failed</span>';case 3:return'<span class="badge bg-success">Sent</span>';default:return'<span class="badge bg-secondary">Created</span>'}}function setDateRange(a,t){startDate=a,endDate=t,$("#search-period span").html(a.format("MMMM D, YYYY")+" - "+t.format("MMMM D, YYYY"))}setDateRange(moment().subtract(29,"days"),moment()),loadData();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
